/* tslint:disable */
/* eslint-disable */
/**
 * Account Management Service API
 * Manage user subscriptions and clusters
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessReview
 */
export interface AccessReview {
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'account_username': string;
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'action': AccessReviewActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'resource_type': AccessReviewResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccessReview
     */
    'subscription_id'?: string;
}

export const AccessReviewActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type AccessReviewActionEnum = typeof AccessReviewActionEnum[keyof typeof AccessReviewActionEnum];
export const AccessReviewResourceTypeEnum = {
    AddOn: 'AddOn',
    Flavour: 'Flavour',
    Account: 'Account',
    AccountPool: 'AccountPool',
    Cluster: 'Cluster',
    Plan: 'Plan',
    Subscription: 'Subscription',
    Organization: 'Organization',
    Role: 'Role',
    Permission: 'Permission',
    RoleBinding: 'RoleBinding',
    Registry: 'Registry',
    RegistryCredential: 'RegistryCredential',
    CurrentAccount: 'CurrentAccount',
    AccessReview: 'AccessReview',
    SelfAcccessReview: 'SelfAcccessReview',
    ResourceReview: 'ResourceReview',
    SelfResourceReview: 'SelfResourceReview',
    ClusterRegistration: 'ClusterRegistration',
    AccessToken: 'AccessToken',
    ClusterAuthorization: 'ClusterAuthorization',
    SelfManagedCluster: 'SelfManagedCluster',
    RedhatManagedCluster: 'RedhatManagedCluster',
    ExportControlReview: 'ExportControlReview',
    ClusterLog: 'ClusterLog',
    ClusterCredential: 'ClusterCredential',
    ClusterMetric: 'ClusterMetric',
    ResourceQuota: 'ResourceQuota',
    ReservedResource: 'ReservedResource',
    Dashboard: 'Dashboard',
    ClusterProviderAndRegion: 'ClusterProviderAndRegion',
    ServiceLog: 'ServiceLog',
    InternalServiceLog: 'InternalServiceLog',
    CsLogs: 'CSLogs',
    SubscriptionLabel: 'SubscriptionLabel',
    OrganizationLabel: 'OrganizationLabel',
    SubscriptionLabelInternal: 'SubscriptionLabelInternal',
    SelfAccessReview: 'SelfAccessReview',
    SubscriptionInternal: 'SubscriptionInternal',
    SubscriptionRoleBinding: 'SubscriptionRoleBinding'
} as const;

export type AccessReviewResourceTypeEnum = typeof AccessReviewResourceTypeEnum[keyof typeof AccessReviewResourceTypeEnum];

/**
 * 
 * @export
 * @interface AccessReviewResponse
 */
export interface AccessReviewResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'action'?: AccessReviewResponseActionEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AccessReviewResponse
     */
    'allowed': boolean;
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'resource_type'?: AccessReviewResponseResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccessReviewResponse
     */
    'subscription_id'?: string;
}

export const AccessReviewResponseActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type AccessReviewResponseActionEnum = typeof AccessReviewResponseActionEnum[keyof typeof AccessReviewResponseActionEnum];
export const AccessReviewResponseResourceTypeEnum = {
    AddOn: 'AddOn',
    Flavour: 'Flavour',
    Account: 'Account',
    AccountPool: 'AccountPool',
    Cluster: 'Cluster',
    Plan: 'Plan',
    Subscription: 'Subscription',
    Organization: 'Organization',
    Role: 'Role',
    Permission: 'Permission',
    RoleBinding: 'RoleBinding',
    Registry: 'Registry',
    RegistryCredential: 'RegistryCredential',
    CurrentAccount: 'CurrentAccount',
    AccessReview: 'AccessReview',
    SelfAcccessReview: 'SelfAcccessReview',
    ResourceReview: 'ResourceReview',
    SelfResourceReview: 'SelfResourceReview',
    ClusterRegistration: 'ClusterRegistration',
    AccessToken: 'AccessToken',
    ClusterAuthorization: 'ClusterAuthorization',
    SelfManagedCluster: 'SelfManagedCluster',
    RedhatManagedCluster: 'RedhatManagedCluster',
    ExportControlReview: 'ExportControlReview',
    ClusterLog: 'ClusterLog',
    ClusterCredential: 'ClusterCredential',
    ClusterMetric: 'ClusterMetric',
    ResourceQuota: 'ResourceQuota',
    ReservedResource: 'ReservedResource',
    Dashboard: 'Dashboard',
    ClusterProviderAndRegion: 'ClusterProviderAndRegion',
    ServiceLog: 'ServiceLog',
    InternalServiceLog: 'InternalServiceLog',
    CsLogs: 'CSLogs',
    SubscriptionLabel: 'SubscriptionLabel',
    OrganizationLabel: 'OrganizationLabel',
    SubscriptionLabelInternal: 'SubscriptionLabelInternal',
    SelfAccessReview: 'SelfAccessReview',
    SubscriptionInternal: 'SubscriptionInternal',
    SubscriptionRoleBinding: 'SubscriptionRoleBinding'
} as const;

export type AccessReviewResponseResourceTypeEnum = typeof AccessReviewResponseResourceTypeEnum[keyof typeof AccessReviewResponseResourceTypeEnum];

/**
 * 
 * @export
 * @interface AccessTokenCfg
 */
export interface AccessTokenCfg {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccessTokenCfg
     */
    'auths': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'ban_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'ban_description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    'banned'?: boolean;
    /**
     * 
     * @type {Array<Capability>}
     * @memberof Account
     */
    'capabilities'?: Array<Capability>;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'first_name'?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof Account
     */
    'labels'?: Array<Label>;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'last_name'?: string;
    /**
     * 
     * @type {Organization}
     * @memberof Account
     */
    'organization'?: Organization;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'rhit_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'rhit_web_user_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    'service_account'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface AccountAllOf
 */
export interface AccountAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'ban_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'ban_description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'banned'?: boolean;
    /**
     * 
     * @type {Array<Capability>}
     * @memberof AccountAllOf
     */
    'capabilities'?: Array<Capability>;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'first_name'?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof AccountAllOf
     */
    'labels'?: Array<Label>;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'last_name'?: string;
    /**
     * 
     * @type {Organization}
     * @memberof AccountAllOf
     */
    'organization'?: Organization;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'rhit_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'rhit_web_user_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'service_account'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAllOf
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface AccountGroup
 */
export interface AccountGroup {
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'managed_by': AccountGroupManagedByEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'organization_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroup
     */
    'updated_at'?: string;
}

export const AccountGroupManagedByEnum = {
    Sso: 'SSO',
    Ocm: 'OCM'
} as const;

export type AccountGroupManagedByEnum = typeof AccountGroupManagedByEnum[keyof typeof AccountGroupManagedByEnum];

/**
 * 
 * @export
 * @interface AccountGroupAllOf
 */
export interface AccountGroupAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAllOf
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAllOf
     */
    'managed_by': AccountGroupAllOfManagedByEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAllOf
     */
    'organization_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAllOf
     */
    'updated_at'?: string;
}

export const AccountGroupAllOfManagedByEnum = {
    Sso: 'SSO',
    Ocm: 'OCM'
} as const;

export type AccountGroupAllOfManagedByEnum = typeof AccountGroupAllOfManagedByEnum[keyof typeof AccountGroupAllOfManagedByEnum];

/**
 * 
 * @export
 * @interface AccountGroupAssignment
 */
export interface AccountGroupAssignment {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'account_group_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'account_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignment
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface AccountGroupAssignmentAllOf
 */
export interface AccountGroupAssignmentAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignmentAllOf
     */
    'account_group_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignmentAllOf
     */
    'account_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignmentAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignmentAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface AccountGroupAssignmentList
 */
export interface AccountGroupAssignmentList {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupAssignmentList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof AccountGroupAssignmentList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof AccountGroupAssignmentList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof AccountGroupAssignmentList
     */
    'total': number;
    /**
     * 
     * @type {Array<AccountGroupAssignment>}
     * @memberof AccountGroupAssignmentList
     */
    'items': Array<AccountGroupAssignment>;
}
/**
 * 
 * @export
 * @interface AccountGroupAssignmentListAllOf
 */
export interface AccountGroupAssignmentListAllOf {
    /**
     * 
     * @type {Array<AccountGroupAssignment>}
     * @memberof AccountGroupAssignmentListAllOf
     */
    'items'?: Array<AccountGroupAssignment>;
}
/**
 * 
 * @export
 * @interface AccountGroupList
 */
export interface AccountGroupList {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof AccountGroupList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof AccountGroupList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof AccountGroupList
     */
    'total': number;
    /**
     * 
     * @type {Array<AccountGroup>}
     * @memberof AccountGroupList
     */
    'items': Array<AccountGroup>;
}
/**
 * 
 * @export
 * @interface AccountGroupListAllOf
 */
export interface AccountGroupListAllOf {
    /**
     * 
     * @type {Array<AccountGroup>}
     * @memberof AccountGroupListAllOf
     */
    'items'?: Array<AccountGroup>;
}
/**
 * 
 * @export
 * @interface AccountGroupRequest
 */
export interface AccountGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequest
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequest
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AccountGroupRequestAllOf
 */
export interface AccountGroupRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequestAllOf
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AccountGroupRequestAllOf
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AccountList
 */
export interface AccountList {
    /**
     * 
     * @type {string}
     * @memberof AccountList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof AccountList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof AccountList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof AccountList
     */
    'total': number;
    /**
     * 
     * @type {Array<Account>}
     * @memberof AccountList
     */
    'items': Array<Account>;
}
/**
 * 
 * @export
 * @interface AccountListAllOf
 */
export interface AccountListAllOf {
    /**
     * 
     * @type {Array<Account>}
     * @memberof AccountListAllOf
     */
    'items'?: Array<Account>;
}
/**
 * 
 * @export
 * @interface AccountPatchRequest
 */
export interface AccountPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountPatchRequest
     */
    'ban_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountPatchRequest
     */
    'ban_description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountPatchRequest
     */
    'banned'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountPatchRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountPatchRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountPatchRequest
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountPatchRequest
     */
    'organization_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountPatchRequest
     */
    'service_account'?: boolean;
}
/**
 * 
 * @export
 * @interface AccountReference
 */
export interface AccountReference {
    /**
     * 
     * @type {string}
     * @memberof AccountReference
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReference
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReference
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReference
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReference
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReference
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface AccountReferenceAllOf
 */
export interface AccountReferenceAllOf {
    /**
     * 
     * @type {string}
     * @memberof AccountReferenceAllOf
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReferenceAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountReferenceAllOf
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface Capability
 */
export interface Capability {
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    'kind'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Capability
     */
    'inherited': boolean;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface CapabilityAllOf
 */
export interface CapabilityAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof CapabilityAllOf
     */
    'inherited': boolean;
    /**
     * 
     * @type {string}
     * @memberof CapabilityAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilityAllOf
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface CapabilityReview
 */
export interface CapabilityReview {
    /**
     * 
     * @type {string}
     * @memberof CapabilityReview
     */
    'result': string;
}
/**
 * 
 * @export
 * @interface CapabilityReviewRequest
 */
export interface CapabilityReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof CapabilityReviewRequest
     */
    'account_username': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilityReviewRequest
     */
    'capability': CapabilityReviewRequestCapabilityEnum;
    /**
     * 
     * @type {string}
     * @memberof CapabilityReviewRequest
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CapabilityReviewRequest
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CapabilityReviewRequest
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CapabilityReviewRequest
     */
    'type': CapabilityReviewRequestTypeEnum;
}

export const CapabilityReviewRequestCapabilityEnum = {
    ManageClusterAdmin: 'manage_cluster_admin'
} as const;

export type CapabilityReviewRequestCapabilityEnum = typeof CapabilityReviewRequestCapabilityEnum[keyof typeof CapabilityReviewRequestCapabilityEnum];
export const CapabilityReviewRequestTypeEnum = {
    Cluster: 'Cluster'
} as const;

export type CapabilityReviewRequestTypeEnum = typeof CapabilityReviewRequestTypeEnum[keyof typeof CapabilityReviewRequestTypeEnum];

/**
 * 
 * @export
 * @interface Certificate
 */
export interface Certificate {
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'cert': string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'key': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Certificate
     */
    'metadata': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'organization_id': string;
    /**
     * 
     * @type {CertificateSerial}
     * @memberof Certificate
     */
    'serial': CertificateSerial;
}
/**
 * 
 * @export
 * @interface CertificateSerial
 */
export interface CertificateSerial {
    /**
     * 
     * @type {string}
     * @memberof CertificateSerial
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof CertificateSerial
     */
    'expiration': string;
    /**
     * 
     * @type {number}
     * @memberof CertificateSerial
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof CertificateSerial
     */
    'serial': number;
    /**
     * 
     * @type {string}
     * @memberof CertificateSerial
     */
    'updated': string;
}
/**
 * 
 * @export
 * @interface CertificatesRequest
 */
export interface CertificatesRequest {
    /**
     * 
     * @type {string}
     * @memberof CertificatesRequest
     */
    'arch'?: CertificatesRequestArchEnum;
    /**
     * 
     * @type {string}
     * @memberof CertificatesRequest
     */
    'type': CertificatesRequestTypeEnum;
}

export const CertificatesRequestArchEnum = {
    X86: 'x86',
    X8664: 'x86_64',
    Ppc: 'ppc',
    Ppc64: 'ppc64',
    Ppc64le: 'ppc64le',
    S390: 's390',
    S390x: 's390x',
    Ia64: 'ia64',
    Aarch64: 'aarch64'
} as const;

export type CertificatesRequestArchEnum = typeof CertificatesRequestArchEnum[keyof typeof CertificatesRequestArchEnum];
export const CertificatesRequestTypeEnum = {
    Sca: 'sca'
} as const;

export type CertificatesRequestTypeEnum = typeof CertificatesRequestTypeEnum[keyof typeof CertificatesRequestTypeEnum];

/**
 * 
 * @export
 * @interface CloudAccount
 */
export interface CloudAccount {
    /**
     * 
     * @type {string}
     * @memberof CloudAccount
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudAccount
     */
    'cloud_provider_id'?: string;
}
/**
 * 
 * @export
 * @interface CloudResource
 */
export interface CloudResource {
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'kind'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CloudResource
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'category_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'cloud_provider'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudResource
     */
    'cpu_cores'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'generic_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudResource
     */
    'memory'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'memory_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'name_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'resource_type'?: CloudResourceResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'size_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResource
     */
    'updated_at'?: string;
}

export const CloudResourceResourceTypeEnum = {
    Addon: 'addon',
    ComputeNode: 'compute.node',
    Cluster: 'cluster',
    NetworkIo: 'network.io',
    NetworkLoadbalancer: 'network.loadbalancer',
    PvStorage: 'pv.storage'
} as const;

export type CloudResourceResourceTypeEnum = typeof CloudResourceResourceTypeEnum[keyof typeof CloudResourceResourceTypeEnum];

/**
 * 
 * @export
 * @interface CloudResourceAllOf
 */
export interface CloudResourceAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof CloudResourceAllOf
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'category_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'cloud_provider'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudResourceAllOf
     */
    'cpu_cores'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'generic_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudResourceAllOf
     */
    'memory'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'memory_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'name_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'resource_type'?: CloudResourceAllOfResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'size_pretty'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceAllOf
     */
    'updated_at'?: string;
}

export const CloudResourceAllOfResourceTypeEnum = {
    Addon: 'addon',
    ComputeNode: 'compute.node',
    Cluster: 'cluster',
    NetworkIo: 'network.io',
    NetworkLoadbalancer: 'network.loadbalancer',
    PvStorage: 'pv.storage'
} as const;

export type CloudResourceAllOfResourceTypeEnum = typeof CloudResourceAllOfResourceTypeEnum[keyof typeof CloudResourceAllOfResourceTypeEnum];

/**
 * 
 * @export
 * @interface CloudResourceList
 */
export interface CloudResourceList {
    /**
     * 
     * @type {string}
     * @memberof CloudResourceList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof CloudResourceList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof CloudResourceList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof CloudResourceList
     */
    'total': number;
    /**
     * 
     * @type {Array<CloudResource>}
     * @memberof CloudResourceList
     */
    'items': Array<CloudResource>;
}
/**
 * 
 * @export
 * @interface CloudResourceListAllOf
 */
export interface CloudResourceListAllOf {
    /**
     * 
     * @type {Array<CloudResource>}
     * @memberof CloudResourceListAllOf
     */
    'items'?: Array<CloudResource>;
}
/**
 * 
 * @export
 * @interface ClusterAuthorizationRequest
 */
export interface ClusterAuthorizationRequest {
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'account_username': string;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'availability_zone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClusterAuthorizationRequest
     */
    'byoc'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'cluster_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ClusterAuthorizationRequest
     */
    'disconnected'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'external_cluster_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClusterAuthorizationRequest
     */
    'managed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'product_category'?: ClusterAuthorizationRequestProductCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'product_id'?: ClusterAuthorizationRequestProductIdEnum;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationRequest
     */
    'quota_version'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClusterAuthorizationRequest
     */
    'reserve'?: boolean;
    /**
     * 
     * @type {Array<ReservedResource>}
     * @memberof ClusterAuthorizationRequest
     */
    'resources'?: Array<ReservedResource>;
}

export const ClusterAuthorizationRequestProductCategoryEnum = {
    AssistedInstall: 'assistedInstall'
} as const;

export type ClusterAuthorizationRequestProductCategoryEnum = typeof ClusterAuthorizationRequestProductCategoryEnum[keyof typeof ClusterAuthorizationRequestProductCategoryEnum];
export const ClusterAuthorizationRequestProductIdEnum = {
    Ocp: 'ocp',
    Osd: 'osd',
    Osdtrial: 'osdtrial',
    Moa: 'moa',
    Rhmi: 'rhmi'
} as const;

export type ClusterAuthorizationRequestProductIdEnum = typeof ClusterAuthorizationRequestProductIdEnum[keyof typeof ClusterAuthorizationRequestProductIdEnum];

/**
 * 
 * @export
 * @interface ClusterAuthorizationResponse
 */
export interface ClusterAuthorizationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ClusterAuthorizationResponse
     */
    'allowed': boolean;
    /**
     * 
     * @type {Array<ExcessResource>}
     * @memberof ClusterAuthorizationResponse
     */
    'excess_resources': Array<ExcessResource>;
    /**
     * 
     * @type {string}
     * @memberof ClusterAuthorizationResponse
     */
    'organization_id'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof ClusterAuthorizationResponse
     */
    'subscription'?: ObjectReference;
}
/**
 * 
 * @export
 * @interface ClusterMetricsNodes
 */
export interface ClusterMetricsNodes {
    /**
     * 
     * @type {number}
     * @memberof ClusterMetricsNodes
     */
    'compute'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClusterMetricsNodes
     */
    'infra'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClusterMetricsNodes
     */
    'master'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClusterMetricsNodes
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ClusterRegistrationRequest
 */
export interface ClusterRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof ClusterRegistrationRequest
     */
    'authorization_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterRegistrationRequest
     */
    'cluster_id'?: string;
}
/**
 * 
 * @export
 * @interface ClusterRegistrationResponse
 */
export interface ClusterRegistrationResponse {
    /**
     * 
     * @type {string}
     * @memberof ClusterRegistrationResponse
     */
    'account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterRegistrationResponse
     */
    'authorization_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterRegistrationResponse
     */
    'cluster_id'?: string;
    /**
     * Cluster Registration expiration in Unix time
     * @type {string}
     * @memberof ClusterRegistrationResponse
     */
    'expires_at'?: string;
}
/**
 * 
 * @export
 * @interface ClusterResource
 */
export interface ClusterResource {
    /**
     * 
     * @type {ClusterResourceTotal}
     * @memberof ClusterResource
     */
    'total': ClusterResourceTotal;
    /**
     * 
     * @type {string}
     * @memberof ClusterResource
     */
    'updated_timestamp': string;
    /**
     * 
     * @type {ClusterResourceTotal}
     * @memberof ClusterResource
     */
    'used': ClusterResourceTotal;
}
/**
 * 
 * @export
 * @interface ClusterResourceTotal
 */
export interface ClusterResourceTotal {
    /**
     * 
     * @type {string}
     * @memberof ClusterResourceTotal
     */
    'unit': string;
    /**
     * 
     * @type {number}
     * @memberof ClusterResourceTotal
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface ClusterTransfer
 */
export interface ClusterTransfer {
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'recipient'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'status'?: ClusterTransferStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransfer
     */
    'updated_at'?: string;
}

export const ClusterTransferStatusEnum = {
    Pending: 'Pending',
    Accepted: 'Accepted',
    Declined: 'Declined',
    Rescinded: 'Rescinded',
    Completed: 'Completed'
} as const;

export type ClusterTransferStatusEnum = typeof ClusterTransferStatusEnum[keyof typeof ClusterTransferStatusEnum];

/**
 * 
 * @export
 * @interface ClusterTransferAllOf
 */
export interface ClusterTransferAllOf {
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'recipient'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'status'?: ClusterTransferAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferAllOf
     */
    'updated_at'?: string;
}

export const ClusterTransferAllOfStatusEnum = {
    Pending: 'Pending',
    Accepted: 'Accepted',
    Declined: 'Declined',
    Rescinded: 'Rescinded',
    Completed: 'Completed'
} as const;

export type ClusterTransferAllOfStatusEnum = typeof ClusterTransferAllOfStatusEnum[keyof typeof ClusterTransferAllOfStatusEnum];

/**
 * 
 * @export
 * @interface ClusterTransferList
 */
export interface ClusterTransferList {
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof ClusterTransferList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ClusterTransferList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ClusterTransferList
     */
    'total': number;
    /**
     * 
     * @type {Array<ClusterTransfer>}
     * @memberof ClusterTransferList
     */
    'items': Array<ClusterTransfer>;
}
/**
 * 
 * @export
 * @interface ClusterTransferListAllOf
 */
export interface ClusterTransferListAllOf {
    /**
     * 
     * @type {Array<ClusterTransfer>}
     * @memberof ClusterTransferListAllOf
     */
    'items'?: Array<ClusterTransfer>;
}
/**
 * 
 * @export
 * @interface ClusterTransferPatchRequest
 */
export interface ClusterTransferPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferPatchRequest
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface ClusterTransferRequest
 */
export interface ClusterTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferRequest
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferRequest
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterTransferRequest
     */
    'recipient'?: string;
}
/**
 * 
 * @export
 * @interface ClusterUpgrade
 */
export interface ClusterUpgrade {
    /**
     * 
     * @type {boolean}
     * @memberof ClusterUpgrade
     */
    'available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClusterUpgrade
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterUpgrade
     */
    'updated_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterUpgrade
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface ConsumedQuota
 */
export interface ConsumedQuota {
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'billing_model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConsumedQuota
     */
    'byoc': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConsumedQuota
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'resource_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuota
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface ConsumedQuotaAllOf
 */
export interface ConsumedQuotaAllOf {
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'billing_model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConsumedQuotaAllOf
     */
    'byoc': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConsumedQuotaAllOf
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'resource_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaAllOf
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface ConsumedQuotaList
 */
export interface ConsumedQuotaList {
    /**
     * 
     * @type {string}
     * @memberof ConsumedQuotaList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof ConsumedQuotaList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ConsumedQuotaList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ConsumedQuotaList
     */
    'total': number;
    /**
     * 
     * @type {Array<ConsumedQuota>}
     * @memberof ConsumedQuotaList
     */
    'items': Array<ConsumedQuota>;
}
/**
 * 
 * @export
 * @interface ConsumedQuotaListAllOf
 */
export interface ConsumedQuotaListAllOf {
    /**
     * 
     * @type {Array<ConsumedQuota>}
     * @memberof ConsumedQuotaListAllOf
     */
    'items'?: Array<ConsumedQuota>;
}
/**
 * 
 * @export
 * @interface DeletedSubscription
 */
export interface DeletedSubscription {
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'kind'?: string;
    /**
     * If set, the date the subscription expires based on the billing model
     * @type {string}
     * @memberof DeletedSubscription
     */
    'billing_expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'billing_marketplace_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'cluster_billing_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'console_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'consumer_uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof DeletedSubscription
     */
    'cpu_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'creator_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'external_cluster_id'?: string;
    /**
     * Last time this subscription were reconciled about cluster usage
     * @type {string}
     * @memberof DeletedSubscription
     */
    'last_reconcile_date'?: string;
    /**
     * Last time status was set to Released for this cluster/subscription in Unix time
     * @type {string}
     * @memberof DeletedSubscription
     */
    'last_released_at'?: string;
    /**
     * Last telemetry authorization request for this cluster/subscription in Unix time
     * @type {string}
     * @memberof DeletedSubscription
     */
    'last_telemetry_date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeletedSubscription
     */
    'managed': boolean;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'product_bundle'?: DeletedSubscriptionProductBundleEnum;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'provenance'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'region_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeletedSubscription
     */
    'released'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'service_level'?: DeletedSubscriptionServiceLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof DeletedSubscription
     */
    'socket_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'support_level'?: DeletedSubscriptionSupportLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'system_units'?: DeletedSubscriptionSystemUnitsEnum;
    /**
     * If the subscription is a trial, date the trial ends
     * @type {string}
     * @memberof DeletedSubscription
     */
    'trial_end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'usage'?: DeletedSubscriptionUsageEnum;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'metrics'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscription
     */
    'query_timestamp'?: string;
}

export const DeletedSubscriptionProductBundleEnum = {
    Openshift: 'Openshift',
    JBossMiddleware: 'JBoss-Middleware',
    IbmCloudPak: 'IBM-CloudPak'
} as const;

export type DeletedSubscriptionProductBundleEnum = typeof DeletedSubscriptionProductBundleEnum[keyof typeof DeletedSubscriptionProductBundleEnum];
export const DeletedSubscriptionServiceLevelEnum = {
    L1L3: 'L1-L3',
    L3Only: 'L3-only'
} as const;

export type DeletedSubscriptionServiceLevelEnum = typeof DeletedSubscriptionServiceLevelEnum[keyof typeof DeletedSubscriptionServiceLevelEnum];
export const DeletedSubscriptionSupportLevelEnum = {
    Eval: 'Eval',
    Standard: 'Standard',
    Premium: 'Premium',
    SelfSupport: 'Self-Support',
    None: 'None'
} as const;

export type DeletedSubscriptionSupportLevelEnum = typeof DeletedSubscriptionSupportLevelEnum[keyof typeof DeletedSubscriptionSupportLevelEnum];
export const DeletedSubscriptionSystemUnitsEnum = {
    CoresVCpu: 'Cores/vCPU',
    Sockets: 'Sockets'
} as const;

export type DeletedSubscriptionSystemUnitsEnum = typeof DeletedSubscriptionSystemUnitsEnum[keyof typeof DeletedSubscriptionSystemUnitsEnum];
export const DeletedSubscriptionUsageEnum = {
    Production: 'Production',
    DevelopmentTest: 'Development/Test',
    DisasterRecovery: 'Disaster Recovery',
    Academic: 'Academic'
} as const;

export type DeletedSubscriptionUsageEnum = typeof DeletedSubscriptionUsageEnum[keyof typeof DeletedSubscriptionUsageEnum];

/**
 * 
 * @export
 * @interface DeletedSubscriptionAllOf
 */
export interface DeletedSubscriptionAllOf {
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscriptionAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscriptionAllOf
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscriptionAllOf
     */
    'metrics'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscriptionAllOf
     */
    'query_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface DeletedSubscriptionList
 */
export interface DeletedSubscriptionList {
    /**
     * 
     * @type {string}
     * @memberof DeletedSubscriptionList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof DeletedSubscriptionList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof DeletedSubscriptionList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof DeletedSubscriptionList
     */
    'total': number;
    /**
     * 
     * @type {Array<DeletedSubscription>}
     * @memberof DeletedSubscriptionList
     */
    'items': Array<DeletedSubscription>;
}
/**
 * 
 * @export
 * @interface DeletedSubscriptionListAllOf
 */
export interface DeletedSubscriptionListAllOf {
    /**
     * 
     * @type {Array<DeletedSubscription>}
     * @memberof DeletedSubscriptionListAllOf
     */
    'items'?: Array<DeletedSubscription>;
}
/**
 * 
 * @export
 * @interface EphemeralResourceQuota
 */
export interface EphemeralResourceQuota {
    /**
     * 
     * @type {string}
     * @memberof EphemeralResourceQuota
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EphemeralResourceQuota
     */
    'byoc'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EphemeralResourceQuota
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EphemeralResourceQuota
     */
    'resource_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EphemeralResourceQuota
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof EphemeralResourceQuota
     */
    'sku_count'?: number;
}
/**
 * 
 * @export
 * @interface ErrorAllOf
 */
export interface ErrorAllOf {
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    'operation_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {string}
     * @memberof ErrorList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    'total': number;
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    'items': Array<Error>;
}
/**
 * 
 * @export
 * @interface ErrorListAllOf
 */
export interface ErrorListAllOf {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorListAllOf
     */
    'items'?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ExcessResource
 */
export interface ExcessResource {
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'billing_model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExcessResource
     */
    'byoc': boolean;
    /**
     * 
     * @type {number}
     * @memberof ExcessResource
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResource
     */
    'resource_type'?: string;
}
/**
 * 
 * @export
 * @interface ExcessResourceAllOf
 */
export interface ExcessResourceAllOf {
    /**
     * 
     * @type {string}
     * @memberof ExcessResourceAllOf
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResourceAllOf
     */
    'billing_model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExcessResourceAllOf
     */
    'byoc': boolean;
    /**
     * 
     * @type {number}
     * @memberof ExcessResourceAllOf
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExcessResourceAllOf
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExcessResourceAllOf
     */
    'resource_type'?: string;
}
/**
 * 
 * @export
 * @interface ExportControlReview
 */
export interface ExportControlReview {
    /**
     * 
     * @type {boolean}
     * @memberof ExportControlReview
     */
    'restricted': boolean;
}
/**
 * 
 * @export
 * @interface ExportControlReviewRequest
 */
export interface ExportControlReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof ExportControlReviewRequest
     */
    'account_username': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExportControlReviewRequest
     */
    'ignore_cache'?: boolean;
}
/**
 * 
 * @export
 * @interface FeatureReview
 */
export interface FeatureReview {
    /**
     * 
     * @type {string}
     * @memberof FeatureReview
     */
    'account_username'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureReview
     */
    'feature': string;
    /**
     * 
     * @type {string}
     * @memberof FeatureReview
     */
    'organization_id'?: string;
}
/**
 * 
 * @export
 * @interface FeatureReviewResponse
 */
export interface FeatureReviewResponse {
    /**
     * 
     * @type {boolean}
     * @memberof FeatureReviewResponse
     */
    'enabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof FeatureReviewResponse
     */
    'feature_id': string;
}
/**
 * 
 * @export
 * @interface FeatureToggle
 */
export interface FeatureToggle {
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    'kind'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FeatureToggle
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface FeatureToggleAllOf
 */
export interface FeatureToggleAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof FeatureToggleAllOf
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface FeatureToggleQueryRequest
 */
export interface FeatureToggleQueryRequest {
    /**
     * 
     * @type {string}
     * @memberof FeatureToggleQueryRequest
     */
    'organization_id': string;
}
/**
 * 
 * @export
 * @interface FeatureToggleQueryRequestAllOf
 */
export interface FeatureToggleQueryRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof FeatureToggleQueryRequestAllOf
     */
    'organization_id': string;
}
/**
 * 
 * @export
 * @interface Label
 */
export interface Label {
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'created_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Label
     */
    'internal': boolean;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface LabelAllOf
 */
export interface LabelAllOf {
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LabelAllOf
     */
    'internal': boolean;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelAllOf
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface LabelList
 */
export interface LabelList {
    /**
     * 
     * @type {string}
     * @memberof LabelList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof LabelList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof LabelList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof LabelList
     */
    'total': number;
    /**
     * 
     * @type {Array<Label>}
     * @memberof LabelList
     */
    'items': Array<Label>;
}
/**
 * 
 * @export
 * @interface LabelListAllOf
 */
export interface LabelListAllOf {
    /**
     * 
     * @type {Array<Label>}
     * @memberof LabelListAllOf
     */
    'items'?: Array<Label>;
}
/**
 * 
 * @export
 * @interface LandingPageCTLItem
 */
export interface LandingPageCTLItem {
    /**
     * 
     * @type {LandingPageCTLItemShape}
     * @memberof LandingPageCTLItem
     */
    'shape'?: LandingPageCTLItemShape;
}
/**
 * 
 * @export
 * @interface LandingPageCTLItemShape
 */
export interface LandingPageCTLItemShape {
    /**
     * 
     * @type {string}
     * @memberof LandingPageCTLItemShape
     */
    'description'?: string;
    /**
     * 
     * @type {LandingPageLinkShape}
     * @memberof LandingPageCTLItemShape
     */
    'link'?: LandingPageLinkShape;
    /**
     * 
     * @type {string}
     * @memberof LandingPageCTLItemShape
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface LandingPageEstateItem
 */
export interface LandingPageEstateItem {
    /**
     * 
     * @type {number}
     * @memberof LandingPageEstateItem
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof LandingPageEstateItem
     */
    'id'?: string;
    /**
     * 
     * @type {LandingPageLinkShape}
     * @memberof LandingPageEstateItem
     */
    'shape'?: LandingPageLinkShape;
}
/**
 * 
 * @export
 * @interface LandingPageLinkShape
 */
export interface LandingPageLinkShape {
    /**
     * 
     * @type {string}
     * @memberof LandingPageLinkShape
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof LandingPageLinkShape
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {string}
     * @memberof List
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface Metric
 */
export interface Metric {
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'external_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'health_state'?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'metrics'?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    'query_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface MetricAllOf
 */
export interface MetricAllOf {
    /**
     * 
     * @type {string}
     * @memberof MetricAllOf
     */
    'external_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricAllOf
     */
    'health_state'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricAllOf
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricAllOf
     */
    'metrics'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricAllOf
     */
    'query_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface MetricsList
 */
export interface MetricsList {
    /**
     * 
     * @type {string}
     * @memberof MetricsList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof MetricsList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof MetricsList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof MetricsList
     */
    'total': number;
    /**
     * 
     * @type {Array<Metric>}
     * @memberof MetricsList
     */
    'items': Array<Metric>;
}
/**
 * 
 * @export
 * @interface MetricsListAllOf
 */
export interface MetricsListAllOf {
    /**
     * 
     * @type {Array<Metric>}
     * @memberof MetricsListAllOf
     */
    'items'?: Array<Metric>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'operation_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface NotificationContactCreateRequest
 */
export interface NotificationContactCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationContactCreateRequest
     */
    'account_identifier'?: string;
}
/**
 * 
 * @export
 * @interface NotificationRequest
 */
export interface NotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'bcc_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationRequest
     */
    'include_red_hat_associates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationRequest
     */
    'internal_only'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'template_name': string;
    /**
     * 
     * @type {Array<TemplateParameter>}
     * @memberof NotificationRequest
     */
    'template_parameters'?: Array<TemplateParameter>;
}
/**
 * 
 * @export
 * @interface ObjectReference
 */
export interface ObjectReference {
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    'kind'?: string;
}
/**
 * 
 * @export
 * @interface OneMetric
 */
export interface OneMetric {
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'arch'?: string;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'channel_info'?: string;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'cloud_provider': string;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'cluster_type': string;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'compute_nodes_cpu': ClusterResource;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'compute_nodes_memory': ClusterResource;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'compute_nodes_sockets': ClusterResource;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'console_url': string;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'cpu': ClusterResource;
    /**
     * 
     * @type {number}
     * @memberof OneMetric
     */
    'critical_alerts_firing': number;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'health_state'?: OneMetricHealthStateEnum;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'memory': ClusterResource;
    /**
     * 
     * @type {ClusterMetricsNodes}
     * @memberof OneMetric
     */
    'nodes': ClusterMetricsNodes;
    /**
     * 
     * @type {number}
     * @memberof OneMetric
     */
    'non_virt_nodes': number;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'openshift_version': string;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'operating_system': string;
    /**
     * 
     * @type {number}
     * @memberof OneMetric
     */
    'operators_condition_failing': number;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'query_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'region': string;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'sockets': ClusterResource;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof OneMetric
     */
    'state_description': string;
    /**
     * 
     * @type {ClusterResource}
     * @memberof OneMetric
     */
    'storage': ClusterResource;
    /**
     * 
     * @type {number}
     * @memberof OneMetric
     */
    'subscription_cpu_total': number;
    /**
     * 
     * @type {number}
     * @memberof OneMetric
     */
    'subscription_obligation_exists': number;
    /**
     * 
     * @type {number}
     * @memberof OneMetric
     */
    'subscription_socket_total': number;
    /**
     * 
     * @type {ClusterUpgrade}
     * @memberof OneMetric
     */
    'upgrade': ClusterUpgrade;
}

export const OneMetricHealthStateEnum = {
    Healthy: 'healthy',
    Unhealthy: 'unhealthy',
    Unknown: 'unknown'
} as const;

export type OneMetricHealthStateEnum = typeof OneMetricHealthStateEnum[keyof typeof OneMetricHealthStateEnum];

/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'kind'?: string;
    /**
     * 
     * @type {Array<Capability>}
     * @memberof Organization
     */
    'capabilities'?: Array<Capability>;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'ebs_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'external_id'?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof Organization
     */
    'labels'?: Array<Label>;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface OrganizationAllOf
 */
export interface OrganizationAllOf {
    /**
     * 
     * @type {Array<Capability>}
     * @memberof OrganizationAllOf
     */
    'capabilities'?: Array<Capability>;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAllOf
     */
    'ebs_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAllOf
     */
    'external_id'?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof OrganizationAllOf
     */
    'labels'?: Array<Label>;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface OrganizationList
 */
export interface OrganizationList {
    /**
     * 
     * @type {string}
     * @memberof OrganizationList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'total': number;
    /**
     * 
     * @type {Array<Organization>}
     * @memberof OrganizationList
     */
    'items': Array<Organization>;
}
/**
 * 
 * @export
 * @interface OrganizationListAllOf
 */
export interface OrganizationListAllOf {
    /**
     * 
     * @type {Array<Organization>}
     * @memberof OrganizationListAllOf
     */
    'items'?: Array<Organization>;
}
/**
 * 
 * @export
 * @interface OrganizationPatchRequest
 */
export interface OrganizationPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPatchRequest
     */
    'ebs_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPatchRequest
     */
    'external_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPatchRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'action'?: PermissionActionEnum;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'resource'?: string;
}

export const PermissionActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type PermissionActionEnum = typeof PermissionActionEnum[keyof typeof PermissionActionEnum];

/**
 * 
 * @export
 * @interface PermissionAllOf
 */
export interface PermissionAllOf {
    /**
     * 
     * @type {string}
     * @memberof PermissionAllOf
     */
    'action'?: PermissionAllOfActionEnum;
    /**
     * 
     * @type {string}
     * @memberof PermissionAllOf
     */
    'resource'?: string;
}

export const PermissionAllOfActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type PermissionAllOfActionEnum = typeof PermissionAllOfActionEnum[keyof typeof PermissionAllOfActionEnum];

/**
 * 
 * @export
 * @interface PermissionList
 */
export interface PermissionList {
    /**
     * 
     * @type {string}
     * @memberof PermissionList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof PermissionList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PermissionList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PermissionList
     */
    'total': number;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof PermissionList
     */
    'items': Array<Permission>;
}
/**
 * 
 * @export
 * @interface PermissionListAllOf
 */
export interface PermissionListAllOf {
    /**
     * 
     * @type {Array<Permission>}
     * @memberof PermissionListAllOf
     */
    'items'?: Array<Permission>;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PlanAllOf
 */
export interface PlanAllOf {
    /**
     * 
     * @type {string}
     * @memberof PlanAllOf
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlanAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlanAllOf
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PlanList
 */
export interface PlanList {
    /**
     * 
     * @type {string}
     * @memberof PlanList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof PlanList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PlanList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PlanList
     */
    'total': number;
    /**
     * 
     * @type {Array<Plan>}
     * @memberof PlanList
     */
    'items': Array<Plan>;
}
/**
 * 
 * @export
 * @interface PlanListAllOf
 */
export interface PlanListAllOf {
    /**
     * 
     * @type {Array<Plan>}
     * @memberof PlanListAllOf
     */
    'items'?: Array<Plan>;
}
/**
 * 
 * @export
 * @interface PullSecretRequest
 */
export interface PullSecretRequest {
    /**
     * 
     * @type {string}
     * @memberof PullSecretRequest
     */
    'external_resource_id': string;
}
/**
 * 
 * @export
 * @interface Quota
 */
export interface Quota {
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'resource_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quota
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface QuotaAllOf
 */
export interface QuotaAllOf {
    /**
     * 
     * @type {string}
     * @memberof QuotaAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaAllOf
     */
    'resource_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface QuotaCost
 */
export interface QuotaCost {
    /**
     * 
     * @type {string}
     * @memberof QuotaCost
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaCost
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaCost
     */
    'kind'?: string;
    /**
     * 
     * @type {number}
     * @memberof QuotaCost
     */
    'allowed': number;
    /**
     * 
     * @type {Array<CloudAccount>}
     * @memberof QuotaCost
     */
    'cloud_accounts'?: Array<CloudAccount>;
    /**
     * 
     * @type {number}
     * @memberof QuotaCost
     */
    'consumed': number;
    /**
     * 
     * @type {string}
     * @memberof QuotaCost
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaCost
     */
    'quota_id': string;
    /**
     * 
     * @type {Array<RelatedResource>}
     * @memberof QuotaCost
     */
    'related_resources'?: Array<RelatedResource>;
    /**
     * 
     * @type {string}
     * @memberof QuotaCost
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface QuotaCostAllOf
 */
export interface QuotaCostAllOf {
    /**
     * 
     * @type {number}
     * @memberof QuotaCostAllOf
     */
    'allowed': number;
    /**
     * 
     * @type {Array<CloudAccount>}
     * @memberof QuotaCostAllOf
     */
    'cloud_accounts'?: Array<CloudAccount>;
    /**
     * 
     * @type {number}
     * @memberof QuotaCostAllOf
     */
    'consumed': number;
    /**
     * 
     * @type {string}
     * @memberof QuotaCostAllOf
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaCostAllOf
     */
    'quota_id': string;
    /**
     * 
     * @type {Array<RelatedResource>}
     * @memberof QuotaCostAllOf
     */
    'related_resources'?: Array<RelatedResource>;
    /**
     * 
     * @type {string}
     * @memberof QuotaCostAllOf
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface QuotaCostList
 */
export interface QuotaCostList {
    /**
     * 
     * @type {string}
     * @memberof QuotaCostList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof QuotaCostList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaCostList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaCostList
     */
    'total': number;
    /**
     * 
     * @type {Array<QuotaCost>}
     * @memberof QuotaCostList
     */
    'items': Array<QuotaCost>;
}
/**
 * 
 * @export
 * @interface QuotaCostListAllOf
 */
export interface QuotaCostListAllOf {
    /**
     * 
     * @type {Array<QuotaCost>}
     * @memberof QuotaCostListAllOf
     */
    'items'?: Array<QuotaCost>;
}
/**
 * 
 * @export
 * @interface QuotaList
 */
export interface QuotaList {
    /**
     * 
     * @type {string}
     * @memberof QuotaList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof QuotaList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaList
     */
    'total': number;
    /**
     * 
     * @type {Array<Quota>}
     * @memberof QuotaList
     */
    'items': Array<Quota>;
}
/**
 * 
 * @export
 * @interface QuotaListAllOf
 */
export interface QuotaListAllOf {
    /**
     * 
     * @type {Array<Quota>}
     * @memberof QuotaListAllOf
     */
    'items'?: Array<Quota>;
}
/**
 * 
 * @export
 * @interface QuotaRules
 */
export interface QuotaRules {
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'availability_zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'billing_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'byoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'cloud'?: string;
    /**
     * 
     * @type {number}
     * @memberof QuotaRules
     */
    'cost': number;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'product'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'quota_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRules
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface QuotaRulesAllOf
 */
export interface QuotaRulesAllOf {
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'availability_zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'billing_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'byoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'cloud'?: string;
    /**
     * 
     * @type {number}
     * @memberof QuotaRulesAllOf
     */
    'cost': number;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'product'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'quota_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesAllOf
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface QuotaRulesList
 */
export interface QuotaRulesList {
    /**
     * 
     * @type {string}
     * @memberof QuotaRulesList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof QuotaRulesList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaRulesList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaRulesList
     */
    'total': number;
    /**
     * 
     * @type {Array<QuotaRules>}
     * @memberof QuotaRulesList
     */
    'items': Array<QuotaRules>;
}
/**
 * 
 * @export
 * @interface QuotaRulesListAllOf
 */
export interface QuotaRulesListAllOf {
    /**
     * 
     * @type {Array<QuotaRules>}
     * @memberof QuotaRulesListAllOf
     */
    'items'?: Array<QuotaRules>;
}
/**
 * 
 * @export
 * @interface Registry
 */
export interface Registry {
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'kind'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Registry
     */
    'cloudAlias'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'org_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'team_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registry
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface RegistryAddressValue
 */
export interface RegistryAddressValue {
    /**
     * 
     * @type {string}
     * @memberof RegistryAddressValue
     */
    'auth'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAddressValue
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface RegistryAllOf
 */
export interface RegistryAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof RegistryAllOf
     */
    'cloudAlias'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'org_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'team_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryAllOf
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface RegistryCreateRequest
 */
export interface RegistryCreateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof RegistryCreateRequest
     */
    'cloudAlias'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    'org_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    'team_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface RegistryCredential
 */
export interface RegistryCredential {
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'kind'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RegistryCredential
     */
    'account'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'external_resource_id'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RegistryCredential
     */
    'registry'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredential
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RegistryCredentialAllOf
 */
export interface RegistryCredentialAllOf {
    /**
     * 
     * @type {ObjectReference}
     * @memberof RegistryCredentialAllOf
     */
    'account'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialAllOf
     */
    'external_resource_id'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RegistryCredentialAllOf
     */
    'registry'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialAllOf
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialAllOf
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialAllOf
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RegistryCredentialList
 */
export interface RegistryCredentialList {
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof RegistryCredentialList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof RegistryCredentialList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof RegistryCredentialList
     */
    'total': number;
    /**
     * 
     * @type {Array<RegistryCredential>}
     * @memberof RegistryCredentialList
     */
    'items': Array<RegistryCredential>;
}
/**
 * 
 * @export
 * @interface RegistryCredentialListAllOf
 */
export interface RegistryCredentialListAllOf {
    /**
     * 
     * @type {Array<RegistryCredential>}
     * @memberof RegistryCredentialListAllOf
     */
    'items'?: Array<RegistryCredential>;
}
/**
 * 
 * @export
 * @interface RegistryCredentialPatchRequest
 */
export interface RegistryCredentialPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialPatchRequest
     */
    'account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialPatchRequest
     */
    'external_resource_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialPatchRequest
     */
    'registry_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialPatchRequest
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCredentialPatchRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface RegistryList
 */
export interface RegistryList {
    /**
     * 
     * @type {string}
     * @memberof RegistryList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof RegistryList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof RegistryList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof RegistryList
     */
    'total': number;
    /**
     * 
     * @type {Array<Registry>}
     * @memberof RegistryList
     */
    'items': Array<Registry>;
}
/**
 * 
 * @export
 * @interface RegistryListAllOf
 */
export interface RegistryListAllOf {
    /**
     * 
     * @type {Array<Registry>}
     * @memberof RegistryListAllOf
     */
    'items'?: Array<Registry>;
}
/**
 * 
 * @export
 * @interface RegistryRequest
 */
export interface RegistryRequest {
    /**
     * 
     * @type {boolean}
     * @memberof RegistryRequest
     */
    'cloudAlias'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegistryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryRequest
     */
    'org_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryRequest
     */
    'team_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryRequest
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryRequest
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface RelatedResource
 */
export interface RelatedResource {
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'availability_zone_type': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'billing_model': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'byoc': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'cloud_provider': string;
    /**
     * 
     * @type {number}
     * @memberof RelatedResource
     */
    'cost': number;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'product': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'product_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResource
     */
    'resource_type': string;
}
/**
 * 
 * @export
 * @interface RelatedResourceAllOf
 */
export interface RelatedResourceAllOf {
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'availability_zone_type': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'billing_model': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'byoc': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'cloud_provider': string;
    /**
     * 
     * @type {number}
     * @memberof RelatedResourceAllOf
     */
    'cost': number;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'product': string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'product_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedResourceAllOf
     */
    'resource_type': string;
}
/**
 * 
 * @export
 * @interface ReservedResource
 */
export interface ReservedResource {
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'billing_marketplace_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'billing_model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservedResource
     */
    'byoc': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReservedResource
     */
    'cluster'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReservedResource
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'resource_type'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof ReservedResource
     */
    'subscription'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof ReservedResource
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ReservedResourceAllOf
 */
export interface ReservedResourceAllOf {
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'availability_zone_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'billing_marketplace_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'billing_model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReservedResourceAllOf
     */
    'byoc': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReservedResourceAllOf
     */
    'cluster'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReservedResourceAllOf
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'resource_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'resource_type'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof ReservedResourceAllOf
     */
    'subscription'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ReservedResourceList
 */
export interface ReservedResourceList {
    /**
     * 
     * @type {string}
     * @memberof ReservedResourceList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof ReservedResourceList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ReservedResourceList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ReservedResourceList
     */
    'total': number;
    /**
     * 
     * @type {Array<ReservedResource>}
     * @memberof ReservedResourceList
     */
    'items': Array<ReservedResource>;
}
/**
 * 
 * @export
 * @interface ReservedResourceListAllOf
 */
export interface ReservedResourceListAllOf {
    /**
     * 
     * @type {Array<ReservedResource>}
     * @memberof ReservedResourceListAllOf
     */
    'items'?: Array<ReservedResource>;
}
/**
 * 
 * @export
 * @interface ReservedResourcePatchRequest
 */
export interface ReservedResourcePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ReservedResourcePatchRequest
     */
    'billing_model'?: string;
}
/**
 * 
 * @export
 * @interface ResourceQuota
 */
export interface ResourceQuota {
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceQuota
     */
    'sku_count': number;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'type'?: ResourceQuotaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuota
     */
    'updated_at'?: string;
}

export const ResourceQuotaTypeEnum = {
    Config: 'Config',
    Manual: 'Manual',
    Subscription: 'Subscription'
} as const;

export type ResourceQuotaTypeEnum = typeof ResourceQuotaTypeEnum[keyof typeof ResourceQuotaTypeEnum];

/**
 * 
 * @export
 * @interface ResourceQuotaAllOf
 */
export interface ResourceQuotaAllOf {
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaAllOf
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaAllOf
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceQuotaAllOf
     */
    'sku_count': number;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaAllOf
     */
    'type'?: ResourceQuotaAllOfTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaAllOf
     */
    'updated_at'?: string;
}

export const ResourceQuotaAllOfTypeEnum = {
    Config: 'Config',
    Manual: 'Manual',
    Subscription: 'Subscription'
} as const;

export type ResourceQuotaAllOfTypeEnum = typeof ResourceQuotaAllOfTypeEnum[keyof typeof ResourceQuotaAllOfTypeEnum];

/**
 * 
 * @export
 * @interface ResourceQuotaList
 */
export interface ResourceQuotaList {
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof ResourceQuotaList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ResourceQuotaList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ResourceQuotaList
     */
    'total': number;
    /**
     * 
     * @type {Array<ResourceQuota>}
     * @memberof ResourceQuotaList
     */
    'items': Array<ResourceQuota>;
}
/**
 * 
 * @export
 * @interface ResourceQuotaListAllOf
 */
export interface ResourceQuotaListAllOf {
    /**
     * 
     * @type {Array<ResourceQuota>}
     * @memberof ResourceQuotaListAllOf
     */
    'items'?: Array<ResourceQuota>;
}
/**
 * 
 * @export
 * @interface ResourceQuotaRequest
 */
export interface ResourceQuotaRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaRequest
     */
    'sku': string;
    /**
     * 
     * @type {number}
     * @memberof ResourceQuotaRequest
     */
    'sku_count': number;
    /**
     * 
     * @type {string}
     * @memberof ResourceQuotaRequest
     */
    'type'?: ResourceQuotaRequestTypeEnum;
}

export const ResourceQuotaRequestTypeEnum = {
    Config: 'Config',
    Manual: 'Manual',
    Subscription: 'Subscription'
} as const;

export type ResourceQuotaRequestTypeEnum = typeof ResourceQuotaRequestTypeEnum[keyof typeof ResourceQuotaRequestTypeEnum];

/**
 * 
 * @export
 * @interface ResourceReview
 */
export interface ResourceReview {
    /**
     * 
     * @type {string}
     * @memberof ResourceReview
     */
    'account_username': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceReview
     */
    'action': ResourceReviewActionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceReview
     */
    'cluster_ids': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceReview
     */
    'cluster_uuids': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceReview
     */
    'organization_ids': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResourceReview
     */
    'resource_type': ResourceReviewResourceTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceReview
     */
    'subscription_ids': Array<string>;
}

export const ResourceReviewActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type ResourceReviewActionEnum = typeof ResourceReviewActionEnum[keyof typeof ResourceReviewActionEnum];
export const ResourceReviewResourceTypeEnum = {
    Cluster: 'Cluster',
    Subscription: 'Subscription'
} as const;

export type ResourceReviewResourceTypeEnum = typeof ResourceReviewResourceTypeEnum[keyof typeof ResourceReviewResourceTypeEnum];

/**
 * 
 * @export
 * @interface ResourceReviewRequest
 */
export interface ResourceReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceReviewRequest
     */
    'account_username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceReviewRequest
     */
    'action'?: ResourceReviewRequestActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ResourceReviewRequest
     */
    'resource_type'?: ResourceReviewRequestResourceTypeEnum;
}

export const ResourceReviewRequestActionEnum = {
    Get: 'get',
    Delete: 'delete',
    Update: 'update'
} as const;

export type ResourceReviewRequestActionEnum = typeof ResourceReviewRequestActionEnum[keyof typeof ResourceReviewRequestActionEnum];
export const ResourceReviewRequestResourceTypeEnum = {
    Cluster: 'Cluster',
    Subscription: 'Subscription'
} as const;

export type ResourceReviewRequestResourceTypeEnum = typeof ResourceReviewRequestResourceTypeEnum[keyof typeof ResourceReviewRequestResourceTypeEnum];

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof Role
     */
    'permissions'?: Array<Permission>;
}
/**
 * 
 * @export
 * @interface RoleAllOf
 */
export interface RoleAllOf {
    /**
     * 
     * @type {string}
     * @memberof RoleAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof RoleAllOf
     */
    'permissions'?: Array<Permission>;
}
/**
 * 
 * @export
 * @interface RoleBinding
 */
export interface RoleBinding {
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'kind'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBinding
     */
    'account'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBinding
     */
    'account_group'?: ObjectReference;
    /**
     * 
     * @type {boolean}
     * @memberof RoleBinding
     */
    'config_managed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'managed_by'?: RoleBindingManagedByEnum;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBinding
     */
    'organization'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBinding
     */
    'role'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBinding
     */
    'subscription'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'type'?: RoleBindingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RoleBinding
     */
    'updated_at'?: string;
}

export const RoleBindingManagedByEnum = {
    Config: 'Config',
    User: 'User'
} as const;

export type RoleBindingManagedByEnum = typeof RoleBindingManagedByEnum[keyof typeof RoleBindingManagedByEnum];
export const RoleBindingTypeEnum = {
    Application: 'Application',
    Subscription: 'Subscription',
    Organization: 'Organization'
} as const;

export type RoleBindingTypeEnum = typeof RoleBindingTypeEnum[keyof typeof RoleBindingTypeEnum];

/**
 * 
 * @export
 * @interface RoleBindingAllOf
 */
export interface RoleBindingAllOf {
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBindingAllOf
     */
    'account'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBindingAllOf
     */
    'account_group'?: ObjectReference;
    /**
     * 
     * @type {boolean}
     * @memberof RoleBindingAllOf
     */
    'config_managed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingAllOf
     */
    'managed_by'?: RoleBindingAllOfManagedByEnum;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBindingAllOf
     */
    'organization'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBindingAllOf
     */
    'role'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof RoleBindingAllOf
     */
    'subscription'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingAllOf
     */
    'type'?: RoleBindingAllOfTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingAllOf
     */
    'updated_at'?: string;
}

export const RoleBindingAllOfManagedByEnum = {
    Config: 'Config',
    User: 'User'
} as const;

export type RoleBindingAllOfManagedByEnum = typeof RoleBindingAllOfManagedByEnum[keyof typeof RoleBindingAllOfManagedByEnum];
export const RoleBindingAllOfTypeEnum = {
    Application: 'Application',
    Subscription: 'Subscription',
    Organization: 'Organization'
} as const;

export type RoleBindingAllOfTypeEnum = typeof RoleBindingAllOfTypeEnum[keyof typeof RoleBindingAllOfTypeEnum];

/**
 * 
 * @export
 * @interface RoleBindingCreateRequest
 */
export interface RoleBindingCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'account_group_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'account_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoleBindingCreateRequest
     */
    'config_managed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'managed_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'role_id': string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingCreateRequest
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface RoleBindingList
 */
export interface RoleBindingList {
    /**
     * 
     * @type {string}
     * @memberof RoleBindingList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof RoleBindingList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof RoleBindingList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof RoleBindingList
     */
    'total': number;
    /**
     * 
     * @type {Array<RoleBinding>}
     * @memberof RoleBindingList
     */
    'items': Array<RoleBinding>;
}
/**
 * 
 * @export
 * @interface RoleBindingListAllOf
 */
export interface RoleBindingListAllOf {
    /**
     * 
     * @type {Array<RoleBinding>}
     * @memberof RoleBindingListAllOf
     */
    'items'?: Array<RoleBinding>;
}
/**
 * 
 * @export
 * @interface RoleBindingRequest
 */
export interface RoleBindingRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'account_group_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'account_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoleBindingRequest
     */
    'config_managed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'managed_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'role_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleBindingRequest
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface RoleList
 */
export interface RoleList {
    /**
     * 
     * @type {string}
     * @memberof RoleList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof RoleList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof RoleList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof RoleList
     */
    'total': number;
    /**
     * 
     * @type {Array<Role>}
     * @memberof RoleList
     */
    'items': Array<Role>;
}
/**
 * 
 * @export
 * @interface RoleListAllOf
 */
export interface RoleListAllOf {
    /**
     * 
     * @type {Array<Role>}
     * @memberof RoleListAllOf
     */
    'items'?: Array<Role>;
}
/**
 * 
 * @export
 * @interface SKU
 */
export interface SKU {
    /**
     * 
     * @type {string}
     * @memberof SKU
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKU
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKU
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKU
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKU
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKU
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface SKUAllOf
 */
export interface SKUAllOf {
    /**
     * 
     * @type {string}
     * @memberof SKUAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKUAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SKUAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface SelfAccessReview
 */
export interface SelfAccessReview {
    /**
     * 
     * @type {string}
     * @memberof SelfAccessReview
     */
    'action': SelfAccessReviewActionEnum;
    /**
     * 
     * @type {string}
     * @memberof SelfAccessReview
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfAccessReview
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfAccessReview
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfAccessReview
     */
    'resource_type': SelfAccessReviewResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SelfAccessReview
     */
    'subscription_id'?: string;
}

export const SelfAccessReviewActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type SelfAccessReviewActionEnum = typeof SelfAccessReviewActionEnum[keyof typeof SelfAccessReviewActionEnum];
export const SelfAccessReviewResourceTypeEnum = {
    AddOn: 'AddOn',
    Flavour: 'Flavour',
    Account: 'Account',
    AccountPool: 'AccountPool',
    Cluster: 'Cluster',
    Plan: 'Plan',
    Subscription: 'Subscription',
    Organization: 'Organization',
    Role: 'Role',
    Permission: 'Permission',
    RoleBinding: 'RoleBinding',
    Registry: 'Registry',
    RegistryCredential: 'RegistryCredential',
    CurrentAccount: 'CurrentAccount',
    AccessReview: 'AccessReview',
    SelfAcccessReview: 'SelfAcccessReview',
    ResourceReview: 'ResourceReview',
    SelfResourceReview: 'SelfResourceReview',
    ClusterRegistration: 'ClusterRegistration',
    AccessToken: 'AccessToken',
    ClusterAuthorization: 'ClusterAuthorization',
    SelfManagedCluster: 'SelfManagedCluster',
    RedhatManagedCluster: 'RedhatManagedCluster',
    ExportControlReview: 'ExportControlReview',
    ClusterLog: 'ClusterLog',
    ClusterCredential: 'ClusterCredential',
    ClusterMetric: 'ClusterMetric',
    ResourceQuota: 'ResourceQuota',
    ReservedResource: 'ReservedResource',
    Dashboard: 'Dashboard',
    ClusterProviderAndRegion: 'ClusterProviderAndRegion',
    ServiceLog: 'ServiceLog',
    InternalServiceLog: 'InternalServiceLog',
    CsLogs: 'CSLogs',
    SubscriptionLabel: 'SubscriptionLabel',
    OrganizationLabel: 'OrganizationLabel',
    SubscriptionLabelInternal: 'SubscriptionLabelInternal',
    SelfAccessReview: 'SelfAccessReview',
    SubscriptionInternal: 'SubscriptionInternal',
    SubscriptionRoleBinding: 'SubscriptionRoleBinding'
} as const;

export type SelfAccessReviewResourceTypeEnum = typeof SelfAccessReviewResourceTypeEnum[keyof typeof SelfAccessReviewResourceTypeEnum];

/**
 * 
 * @export
 * @interface SelfEntitlementStatus
 */
export interface SelfEntitlementStatus {
    /**
     * 
     * @type {string}
     * @memberof SelfEntitlementStatus
     */
    'product'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfEntitlementStatus
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface SelfFeatureReview
 */
export interface SelfFeatureReview {
    /**
     * 
     * @type {string}
     * @memberof SelfFeatureReview
     */
    'feature': string;
}
/**
 * 
 * @export
 * @interface SelfResourceReview
 */
export interface SelfResourceReview {
    /**
     * 
     * @type {string}
     * @memberof SelfResourceReview
     */
    'action': SelfResourceReviewActionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof SelfResourceReview
     */
    'cluster_ids': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SelfResourceReview
     */
    'cluster_uuids': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SelfResourceReview
     */
    'organization_ids': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SelfResourceReview
     */
    'resource_type': SelfResourceReviewResourceTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof SelfResourceReview
     */
    'subscription_ids': Array<string>;
}

export const SelfResourceReviewActionEnum = {
    Get: 'get',
    List: 'list',
    Create: 'create',
    Delete: 'delete',
    Update: 'update'
} as const;

export type SelfResourceReviewActionEnum = typeof SelfResourceReviewActionEnum[keyof typeof SelfResourceReviewActionEnum];
export const SelfResourceReviewResourceTypeEnum = {
    Cluster: 'Cluster',
    Subscription: 'Subscription'
} as const;

export type SelfResourceReviewResourceTypeEnum = typeof SelfResourceReviewResourceTypeEnum[keyof typeof SelfResourceReviewResourceTypeEnum];

/**
 * 
 * @export
 * @interface SelfResourceReviewRequest
 */
export interface SelfResourceReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof SelfResourceReviewRequest
     */
    'action'?: SelfResourceReviewRequestActionEnum;
    /**
     * 
     * @type {string}
     * @memberof SelfResourceReviewRequest
     */
    'resource_type'?: SelfResourceReviewRequestResourceTypeEnum;
}

export const SelfResourceReviewRequestActionEnum = {
    Get: 'get',
    Delete: 'delete',
    Update: 'update'
} as const;

export type SelfResourceReviewRequestActionEnum = typeof SelfResourceReviewRequestActionEnum[keyof typeof SelfResourceReviewRequestActionEnum];
export const SelfResourceReviewRequestResourceTypeEnum = {
    Cluster: 'Cluster',
    Subscription: 'Subscription'
} as const;

export type SelfResourceReviewRequestResourceTypeEnum = typeof SelfResourceReviewRequestResourceTypeEnum[keyof typeof SelfResourceReviewRequestResourceTypeEnum];

/**
 * 
 * @export
 * @interface SelfServiceLandingPageSchema
 */
export interface SelfServiceLandingPageSchema {
    /**
     * 
     * @type {SelfServiceLandingPageSchemaConfigTryLearn}
     * @memberof SelfServiceLandingPageSchema
     */
    'configTryLearn'?: SelfServiceLandingPageSchemaConfigTryLearn;
    /**
     * 
     * @type {SelfServiceLandingPageSchemaEstate}
     * @memberof SelfServiceLandingPageSchema
     */
    'estate'?: SelfServiceLandingPageSchemaEstate;
}
/**
 * 
 * @export
 * @interface SelfServiceLandingPageSchemaConfigTryLearn
 */
export interface SelfServiceLandingPageSchemaConfigTryLearn {
    /**
     * 
     * @type {Array<LandingPageCTLItem>}
     * @memberof SelfServiceLandingPageSchemaConfigTryLearn
     */
    'configure'?: Array<LandingPageCTLItem>;
    /**
     * 
     * @type {Array<LandingPageCTLItem>}
     * @memberof SelfServiceLandingPageSchemaConfigTryLearn
     */
    'try'?: Array<LandingPageCTLItem>;
}
/**
 * 
 * @export
 * @interface SelfServiceLandingPageSchemaEstate
 */
export interface SelfServiceLandingPageSchemaEstate {
    /**
     * 
     * @type {Array<LandingPageEstateItem>}
     * @memberof SelfServiceLandingPageSchemaEstate
     */
    'items'?: Array<LandingPageEstateItem>;
}
/**
 * 
 * @export
 * @interface SelfTermsReview
 */
export interface SelfTermsReview {
    /**
     * 
     * @type {boolean}
     * @memberof SelfTermsReview
     */
    'check_optional_terms'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SelfTermsReview
     */
    'event_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfTermsReview
     */
    'site_code'?: string;
}
/**
 * 
 * @export
 * @interface SkuList
 */
export interface SkuList {
    /**
     * 
     * @type {string}
     * @memberof SkuList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof SkuList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof SkuList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof SkuList
     */
    'total': number;
    /**
     * 
     * @type {Array<SKU>}
     * @memberof SkuList
     */
    'items': Array<SKU>;
}
/**
 * 
 * @export
 * @interface SkuListAllOf
 */
export interface SkuListAllOf {
    /**
     * 
     * @type {Array<SKU>}
     * @memberof SkuListAllOf
     */
    'items'?: Array<SKU>;
}
/**
 * 
 * @export
 * @interface SkuRules
 */
export interface SkuRules {
    /**
     * 
     * @type {string}
     * @memberof SkuRules
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof SkuRules
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SkuRules
     */
    'kind'?: string;
    /**
     * 
     * @type {number}
     * @memberof SkuRules
     */
    'allowed'?: number;
    /**
     * 
     * @type {string}
     * @memberof SkuRules
     */
    'quota_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SkuRules
     */
    'sku'?: string;
}
/**
 * 
 * @export
 * @interface SkuRulesAllOf
 */
export interface SkuRulesAllOf {
    /**
     * 
     * @type {number}
     * @memberof SkuRulesAllOf
     */
    'allowed'?: number;
    /**
     * 
     * @type {string}
     * @memberof SkuRulesAllOf
     */
    'quota_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SkuRulesAllOf
     */
    'sku'?: string;
}
/**
 * 
 * @export
 * @interface SkuRulesList
 */
export interface SkuRulesList {
    /**
     * 
     * @type {string}
     * @memberof SkuRulesList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof SkuRulesList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof SkuRulesList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof SkuRulesList
     */
    'total': number;
    /**
     * 
     * @type {Array<SkuRules>}
     * @memberof SkuRulesList
     */
    'items': Array<SkuRules>;
}
/**
 * 
 * @export
 * @interface SkuRulesListAllOf
 */
export interface SkuRulesListAllOf {
    /**
     * 
     * @type {Array<SkuRules>}
     * @memberof SkuRulesListAllOf
     */
    'items'?: Array<SkuRules>;
}
/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'kind'?: string;
    /**
     * If set, the date the subscription expires based on the billing model
     * @type {string}
     * @memberof Subscription
     */
    'billing_expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'billing_marketplace_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'cluster_billing_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'console_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'consumer_uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'cpu_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'creator_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'external_cluster_id'?: string;
    /**
     * Last time this subscription were reconciled about cluster usage
     * @type {string}
     * @memberof Subscription
     */
    'last_reconcile_date'?: string;
    /**
     * Last time status was set to Released for this cluster/subscription in Unix time
     * @type {string}
     * @memberof Subscription
     */
    'last_released_at'?: string;
    /**
     * Last telemetry authorization request for this cluster/subscription in Unix time
     * @type {string}
     * @memberof Subscription
     */
    'last_telemetry_date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'managed': boolean;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'product_bundle'?: SubscriptionProductBundleEnum;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'provenance'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'region_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'released'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'service_level'?: SubscriptionServiceLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'socket_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'support_level'?: SubscriptionSupportLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'system_units'?: SubscriptionSystemUnitsEnum;
    /**
     * If the subscription is a trial, date the trial ends
     * @type {string}
     * @memberof Subscription
     */
    'trial_end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'usage'?: SubscriptionUsageEnum;
    /**
     * 
     * @type {Array<Capability>}
     * @memberof Subscription
     */
    'capabilities'?: Array<Capability>;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'created_at'?: string;
    /**
     * 
     * @type {AccountReference}
     * @memberof Subscription
     */
    'creator'?: AccountReference;
    /**
     * Calulated as the subscription created date + 60 days
     * @type {string}
     * @memberof Subscription
     */
    'eval_expiration_date'?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof Subscription
     */
    'labels'?: Array<Label>;
    /**
     * 
     * @type {Array<OneMetric>}
     * @memberof Subscription
     */
    'metrics'?: Array<OneMetric>;
    /**
     * 
     * @type {Array<Account>}
     * @memberof Subscription
     */
    'notification_contacts'?: Array<Account>;
    /**
     * 
     * @type {Plan}
     * @memberof Subscription
     */
    'plan'?: Plan;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'updated_at'?: string;
}

export const SubscriptionProductBundleEnum = {
    Openshift: 'Openshift',
    JBossMiddleware: 'JBoss-Middleware',
    IbmCloudPak: 'IBM-CloudPak'
} as const;

export type SubscriptionProductBundleEnum = typeof SubscriptionProductBundleEnum[keyof typeof SubscriptionProductBundleEnum];
export const SubscriptionServiceLevelEnum = {
    L1L3: 'L1-L3',
    L3Only: 'L3-only'
} as const;

export type SubscriptionServiceLevelEnum = typeof SubscriptionServiceLevelEnum[keyof typeof SubscriptionServiceLevelEnum];
export const SubscriptionSupportLevelEnum = {
    Eval: 'Eval',
    Standard: 'Standard',
    Premium: 'Premium',
    SelfSupport: 'Self-Support',
    None: 'None'
} as const;

export type SubscriptionSupportLevelEnum = typeof SubscriptionSupportLevelEnum[keyof typeof SubscriptionSupportLevelEnum];
export const SubscriptionSystemUnitsEnum = {
    CoresVCpu: 'Cores/vCPU',
    Sockets: 'Sockets'
} as const;

export type SubscriptionSystemUnitsEnum = typeof SubscriptionSystemUnitsEnum[keyof typeof SubscriptionSystemUnitsEnum];
export const SubscriptionUsageEnum = {
    Production: 'Production',
    DevelopmentTest: 'Development/Test',
    DisasterRecovery: 'Disaster Recovery',
    Academic: 'Academic'
} as const;

export type SubscriptionUsageEnum = typeof SubscriptionUsageEnum[keyof typeof SubscriptionUsageEnum];

/**
 * 
 * @export
 * @interface SubscriptionAllOf
 */
export interface SubscriptionAllOf {
    /**
     * 
     * @type {Array<Capability>}
     * @memberof SubscriptionAllOf
     */
    'capabilities'?: Array<Capability>;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {AccountReference}
     * @memberof SubscriptionAllOf
     */
    'creator'?: AccountReference;
    /**
     * Calulated as the subscription created date + 60 days
     * @type {string}
     * @memberof SubscriptionAllOf
     */
    'eval_expiration_date'?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof SubscriptionAllOf
     */
    'labels'?: Array<Label>;
    /**
     * 
     * @type {Array<OneMetric>}
     * @memberof SubscriptionAllOf
     */
    'metrics'?: Array<OneMetric>;
    /**
     * 
     * @type {Array<Account>}
     * @memberof SubscriptionAllOf
     */
    'notification_contacts'?: Array<Account>;
    /**
     * 
     * @type {Plan}
     * @memberof SubscriptionAllOf
     */
    'plan'?: Plan;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface SubscriptionCommonFields
 */
export interface SubscriptionCommonFields {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'kind'?: string;
    /**
     * If set, the date the subscription expires based on the billing model
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'billing_expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'billing_marketplace_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'cluster_billing_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'console_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'consumer_uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionCommonFields
     */
    'cpu_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'creator_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'external_cluster_id'?: string;
    /**
     * Last time this subscription were reconciled about cluster usage
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'last_reconcile_date'?: string;
    /**
     * Last time status was set to Released for this cluster/subscription in Unix time
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'last_released_at'?: string;
    /**
     * Last telemetry authorization request for this cluster/subscription in Unix time
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'last_telemetry_date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionCommonFields
     */
    'managed': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'product_bundle'?: SubscriptionCommonFieldsProductBundleEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'provenance'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'region_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionCommonFields
     */
    'released'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'service_level'?: SubscriptionCommonFieldsServiceLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionCommonFields
     */
    'socket_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'support_level'?: SubscriptionCommonFieldsSupportLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'system_units'?: SubscriptionCommonFieldsSystemUnitsEnum;
    /**
     * If the subscription is a trial, date the trial ends
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'trial_end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFields
     */
    'usage'?: SubscriptionCommonFieldsUsageEnum;
}

export const SubscriptionCommonFieldsProductBundleEnum = {
    Openshift: 'Openshift',
    JBossMiddleware: 'JBoss-Middleware',
    IbmCloudPak: 'IBM-CloudPak'
} as const;

export type SubscriptionCommonFieldsProductBundleEnum = typeof SubscriptionCommonFieldsProductBundleEnum[keyof typeof SubscriptionCommonFieldsProductBundleEnum];
export const SubscriptionCommonFieldsServiceLevelEnum = {
    L1L3: 'L1-L3',
    L3Only: 'L3-only'
} as const;

export type SubscriptionCommonFieldsServiceLevelEnum = typeof SubscriptionCommonFieldsServiceLevelEnum[keyof typeof SubscriptionCommonFieldsServiceLevelEnum];
export const SubscriptionCommonFieldsSupportLevelEnum = {
    Eval: 'Eval',
    Standard: 'Standard',
    Premium: 'Premium',
    SelfSupport: 'Self-Support',
    None: 'None'
} as const;

export type SubscriptionCommonFieldsSupportLevelEnum = typeof SubscriptionCommonFieldsSupportLevelEnum[keyof typeof SubscriptionCommonFieldsSupportLevelEnum];
export const SubscriptionCommonFieldsSystemUnitsEnum = {
    CoresVCpu: 'Cores/vCPU',
    Sockets: 'Sockets'
} as const;

export type SubscriptionCommonFieldsSystemUnitsEnum = typeof SubscriptionCommonFieldsSystemUnitsEnum[keyof typeof SubscriptionCommonFieldsSystemUnitsEnum];
export const SubscriptionCommonFieldsUsageEnum = {
    Production: 'Production',
    DevelopmentTest: 'Development/Test',
    DisasterRecovery: 'Disaster Recovery',
    Academic: 'Academic'
} as const;

export type SubscriptionCommonFieldsUsageEnum = typeof SubscriptionCommonFieldsUsageEnum[keyof typeof SubscriptionCommonFieldsUsageEnum];

/**
 * 
 * @export
 * @interface SubscriptionCommonFieldsAllOf
 */
export interface SubscriptionCommonFieldsAllOf {
    /**
     * If set, the date the subscription expires based on the billing model
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'billing_expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'billing_marketplace_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'cluster_billing_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'console_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'consumer_uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'cpu_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'creator_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'external_cluster_id'?: string;
    /**
     * Last time this subscription were reconciled about cluster usage
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'last_reconcile_date'?: string;
    /**
     * Last time status was set to Released for this cluster/subscription in Unix time
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'last_released_at'?: string;
    /**
     * Last telemetry authorization request for this cluster/subscription in Unix time
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'last_telemetry_date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'managed': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'product_bundle'?: SubscriptionCommonFieldsAllOfProductBundleEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'provenance'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'region_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'released'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'service_level'?: SubscriptionCommonFieldsAllOfServiceLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'socket_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'support_level'?: SubscriptionCommonFieldsAllOfSupportLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'system_units'?: SubscriptionCommonFieldsAllOfSystemUnitsEnum;
    /**
     * If the subscription is a trial, date the trial ends
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'trial_end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCommonFieldsAllOf
     */
    'usage'?: SubscriptionCommonFieldsAllOfUsageEnum;
}

export const SubscriptionCommonFieldsAllOfProductBundleEnum = {
    Openshift: 'Openshift',
    JBossMiddleware: 'JBoss-Middleware',
    IbmCloudPak: 'IBM-CloudPak'
} as const;

export type SubscriptionCommonFieldsAllOfProductBundleEnum = typeof SubscriptionCommonFieldsAllOfProductBundleEnum[keyof typeof SubscriptionCommonFieldsAllOfProductBundleEnum];
export const SubscriptionCommonFieldsAllOfServiceLevelEnum = {
    L1L3: 'L1-L3',
    L3Only: 'L3-only'
} as const;

export type SubscriptionCommonFieldsAllOfServiceLevelEnum = typeof SubscriptionCommonFieldsAllOfServiceLevelEnum[keyof typeof SubscriptionCommonFieldsAllOfServiceLevelEnum];
export const SubscriptionCommonFieldsAllOfSupportLevelEnum = {
    Eval: 'Eval',
    Standard: 'Standard',
    Premium: 'Premium',
    SelfSupport: 'Self-Support',
    None: 'None'
} as const;

export type SubscriptionCommonFieldsAllOfSupportLevelEnum = typeof SubscriptionCommonFieldsAllOfSupportLevelEnum[keyof typeof SubscriptionCommonFieldsAllOfSupportLevelEnum];
export const SubscriptionCommonFieldsAllOfSystemUnitsEnum = {
    CoresVCpu: 'Cores/vCPU',
    Sockets: 'Sockets'
} as const;

export type SubscriptionCommonFieldsAllOfSystemUnitsEnum = typeof SubscriptionCommonFieldsAllOfSystemUnitsEnum[keyof typeof SubscriptionCommonFieldsAllOfSystemUnitsEnum];
export const SubscriptionCommonFieldsAllOfUsageEnum = {
    Production: 'Production',
    DevelopmentTest: 'Development/Test',
    DisasterRecovery: 'Disaster Recovery',
    Academic: 'Academic'
} as const;

export type SubscriptionCommonFieldsAllOfUsageEnum = typeof SubscriptionCommonFieldsAllOfUsageEnum[keyof typeof SubscriptionCommonFieldsAllOfUsageEnum];

/**
 * 
 * @export
 * @interface SubscriptionCreateRequest
 */
export interface SubscriptionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCreateRequest
     */
    'cluster_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCreateRequest
     */
    'console_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCreateRequest
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCreateRequest
     */
    'plan_id': SubscriptionCreateRequestPlanIdEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionCreateRequest
     */
    'status': SubscriptionCreateRequestStatusEnum;
}

export const SubscriptionCreateRequestPlanIdEnum = {
    Ocp: 'OCP'
} as const;

export type SubscriptionCreateRequestPlanIdEnum = typeof SubscriptionCreateRequestPlanIdEnum[keyof typeof SubscriptionCreateRequestPlanIdEnum];
export const SubscriptionCreateRequestStatusEnum = {
    Disconnected: 'Disconnected'
} as const;

export type SubscriptionCreateRequestStatusEnum = typeof SubscriptionCreateRequestStatusEnum[keyof typeof SubscriptionCreateRequestStatusEnum];

/**
 * 
 * @export
 * @interface SubscriptionList
 */
export interface SubscriptionList {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionList
     */
    'total': number;
    /**
     * 
     * @type {Array<Subscription>}
     * @memberof SubscriptionList
     */
    'items': Array<Subscription>;
}
/**
 * 
 * @export
 * @interface SubscriptionListAllOf
 */
export interface SubscriptionListAllOf {
    /**
     * 
     * @type {Array<Subscription>}
     * @memberof SubscriptionListAllOf
     */
    'items'?: Array<Subscription>;
}
/**
 * 
 * @export
 * @interface SubscriptionMetric
 */
export interface SubscriptionMetric {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionMetric
     */
    '_id'?: string;
}
/**
 * 
 * @export
 * @interface SubscriptionMetricAllOf
 */
export interface SubscriptionMetricAllOf {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionMetricAllOf
     */
    '_id'?: string;
}
/**
 * 
 * @export
 * @interface SubscriptionMetricList
 */
export interface SubscriptionMetricList {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionMetricList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionMetricList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionMetricList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionMetricList
     */
    'total': number;
    /**
     * 
     * @type {Array<SubscriptionMetric>}
     * @memberof SubscriptionMetricList
     */
    'items': Array<SubscriptionMetric>;
}
/**
 * 
 * @export
 * @interface SubscriptionMetricListAllOf
 */
export interface SubscriptionMetricListAllOf {
    /**
     * 
     * @type {Array<SubscriptionMetric>}
     * @memberof SubscriptionMetricListAllOf
     */
    'items'?: Array<SubscriptionMetric>;
}
/**
 * 
 * @export
 * @interface SubscriptionPatchRequest
 */
export interface SubscriptionPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'billing_expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'cloud_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'cloud_provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'cluster_billing_model'?: SubscriptionPatchRequestClusterBillingModelEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'console_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'consumer_uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionPatchRequest
     */
    'cpu_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'creator_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'external_cluster_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionPatchRequest
     */
    'managed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'organization_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'plan_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'product_bundle'?: SubscriptionPatchRequestProductBundleEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'provenance'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'region_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionPatchRequest
     */
    'released'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'service_level'?: SubscriptionPatchRequestServiceLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionPatchRequest
     */
    'socket_total'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'support_level'?: SubscriptionPatchRequestSupportLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'system_units'?: SubscriptionPatchRequestSystemUnitsEnum;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'trial_end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionPatchRequest
     */
    'usage'?: SubscriptionPatchRequestUsageEnum;
}

export const SubscriptionPatchRequestClusterBillingModelEnum = {
    Standard: 'standard',
    Marketplace: 'marketplace',
    MarketplaceAws: 'marketplace-aws',
    MarketplaceAzure: 'marketplace-azure',
    MarketplaceRhm: 'marketplace-rhm'
} as const;

export type SubscriptionPatchRequestClusterBillingModelEnum = typeof SubscriptionPatchRequestClusterBillingModelEnum[keyof typeof SubscriptionPatchRequestClusterBillingModelEnum];
export const SubscriptionPatchRequestProductBundleEnum = {
    Openshift: 'Openshift',
    JBossMiddleware: 'JBoss-Middleware',
    IbmCloudPak: 'IBM-CloudPak'
} as const;

export type SubscriptionPatchRequestProductBundleEnum = typeof SubscriptionPatchRequestProductBundleEnum[keyof typeof SubscriptionPatchRequestProductBundleEnum];
export const SubscriptionPatchRequestServiceLevelEnum = {
    L1L3: 'L1-L3',
    L3Only: 'L3-only'
} as const;

export type SubscriptionPatchRequestServiceLevelEnum = typeof SubscriptionPatchRequestServiceLevelEnum[keyof typeof SubscriptionPatchRequestServiceLevelEnum];
export const SubscriptionPatchRequestSupportLevelEnum = {
    Eval: 'Eval',
    Standard: 'Standard',
    Premium: 'Premium',
    SelfSupport: 'Self-Support',
    None: 'None'
} as const;

export type SubscriptionPatchRequestSupportLevelEnum = typeof SubscriptionPatchRequestSupportLevelEnum[keyof typeof SubscriptionPatchRequestSupportLevelEnum];
export const SubscriptionPatchRequestSystemUnitsEnum = {
    CoresVCpu: 'Cores/vCPU',
    Sockets: 'Sockets'
} as const;

export type SubscriptionPatchRequestSystemUnitsEnum = typeof SubscriptionPatchRequestSystemUnitsEnum[keyof typeof SubscriptionPatchRequestSystemUnitsEnum];
export const SubscriptionPatchRequestUsageEnum = {
    Production: 'Production',
    DevelopmentTest: 'Development/Test',
    DisasterRecovery: 'Disaster Recovery',
    Academic: 'Academic'
} as const;

export type SubscriptionPatchRequestUsageEnum = typeof SubscriptionPatchRequestUsageEnum[keyof typeof SubscriptionPatchRequestUsageEnum];

/**
 * 
 * @export
 * @interface SubscriptionRoleBinding
 */
export interface SubscriptionRoleBinding {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'kind'?: string;
    /**
     * 
     * @type {AccountReference}
     * @memberof SubscriptionRoleBinding
     */
    'account'?: AccountReference;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'account_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'account_username'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'created_at'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof SubscriptionRoleBinding
     */
    'role'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof SubscriptionRoleBinding
     */
    'subscription'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBinding
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface SubscriptionRoleBindingAllOf
 */
export interface SubscriptionRoleBindingAllOf {
    /**
     * 
     * @type {AccountReference}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'account'?: AccountReference;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'account_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'account_username'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'created_at'?: string;
    /**
     * 
     * @type {ObjectReference}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'role'?: ObjectReference;
    /**
     * 
     * @type {ObjectReference}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'subscription'?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingAllOf
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface SubscriptionRoleBindingCreateRequest
 */
export interface SubscriptionRoleBindingCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingCreateRequest
     */
    'account_username': string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingCreateRequest
     */
    'role_id': string;
}
/**
 * 
 * @export
 * @interface SubscriptionRoleBindingList
 */
export interface SubscriptionRoleBindingList {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionRoleBindingList
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRoleBindingList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRoleBindingList
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionRoleBindingList
     */
    'total': number;
    /**
     * 
     * @type {Array<SubscriptionRoleBinding>}
     * @memberof SubscriptionRoleBindingList
     */
    'items': Array<SubscriptionRoleBinding>;
}
/**
 * 
 * @export
 * @interface SubscriptionRoleBindingListAllOf
 */
export interface SubscriptionRoleBindingListAllOf {
    /**
     * 
     * @type {Array<SubscriptionRoleBinding>}
     * @memberof SubscriptionRoleBindingListAllOf
     */
    'items'?: Array<SubscriptionRoleBinding>;
}
/**
 * 
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'kind'?: string;
    /**
     * 
     * @type {Array<SummaryMetrics>}
     * @memberof Summary
     */
    'metrics': Array<SummaryMetrics>;
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SummaryAllOf
 */
export interface SummaryAllOf {
    /**
     * 
     * @type {Array<SummaryMetrics>}
     * @memberof SummaryAllOf
     */
    'metrics': Array<SummaryMetrics>;
    /**
     * 
     * @type {string}
     * @memberof SummaryAllOf
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SummaryMetrics
 */
export interface SummaryMetrics {
    /**
     * 
     * @type {string}
     * @memberof SummaryMetrics
     */
    'name'?: string;
    /**
     * 
     * @type {Array<SummaryVector>}
     * @memberof SummaryMetrics
     */
    'vector'?: Array<SummaryVector>;
}
/**
 * 
 * @export
 * @interface SummaryMetricsAllOf
 */
export interface SummaryMetricsAllOf {
    /**
     * 
     * @type {string}
     * @memberof SummaryMetricsAllOf
     */
    'name'?: string;
    /**
     * 
     * @type {Array<SummaryVector>}
     * @memberof SummaryMetricsAllOf
     */
    'vector'?: Array<SummaryVector>;
}
/**
 * 
 * @export
 * @interface SummaryVector
 */
export interface SummaryVector {
    /**
     * 
     * @type {string}
     * @memberof SummaryVector
     */
    'time'?: string;
    /**
     * 
     * @type {number}
     * @memberof SummaryVector
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface SummaryVectorAllOf
 */
export interface SummaryVectorAllOf {
    /**
     * 
     * @type {string}
     * @memberof SummaryVectorAllOf
     */
    'time'?: string;
    /**
     * 
     * @type {number}
     * @memberof SummaryVectorAllOf
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface SupportCasesCreatedResponse
 */
export interface SupportCasesCreatedResponse {
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'caseNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'severity'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesCreatedResponse
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface SupportCasesRequest
 */
export interface SupportCasesRequest {
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'case_language'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'cluster_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'contact_sso_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'event_stream_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'openshift_cluster_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'product'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'severity': SupportCasesRequestSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof SupportCasesRequest
     */
    'version'?: string;
}

export const SupportCasesRequestSeverityEnum = {
    _1Urgent: '1 (Urgent)',
    _2High: '2 (High)',
    _3Normal: '3 (Normal)',
    _4Low: '4 (Low)'
} as const;

export type SupportCasesRequestSeverityEnum = typeof SupportCasesRequestSeverityEnum[keyof typeof SupportCasesRequestSeverityEnum];

/**
 * 
 * @export
 * @interface TemplateParameter
 */
export interface TemplateParameter {
    /**
     * 
     * @type {string}
     * @memberof TemplateParameter
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof TemplateParameter
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TermsReview
 */
export interface TermsReview {
    /**
     * 
     * @type {string}
     * @memberof TermsReview
     */
    'account_username': string;
    /**
     * 
     * @type {boolean}
     * @memberof TermsReview
     */
    'check_optional_terms'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TermsReview
     */
    'event_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TermsReview
     */
    'site_code'?: string;
}
/**
 * 
 * @export
 * @interface TermsReviewResponse
 */
export interface TermsReviewResponse {
    /**
     * 
     * @type {string}
     * @memberof TermsReviewResponse
     */
    'account_id': string;
    /**
     * 
     * @type {string}
     * @memberof TermsReviewResponse
     */
    'organization_id': string;
    /**
     * 
     * @type {string}
     * @memberof TermsReviewResponse
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TermsReviewResponse
     */
    'terms_available': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TermsReviewResponse
     */
    'terms_required': boolean;
}
/**
 * 
 * @export
 * @interface TokenAuthorizationRequest
 */
export interface TokenAuthorizationRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenAuthorizationRequest
     */
    'authorization_token'?: string;
}
/**
 * 
 * @export
 * @interface TokenAuthorizationResponse
 */
export interface TokenAuthorizationResponse {
    /**
     * 
     * @type {Account}
     * @memberof TokenAuthorizationResponse
     */
    'account'?: Account;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccessTokenPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/access_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of accounts
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an account by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchRhit] If true, includes the RHIT account_id in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchRhit?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fetchRhit !== undefined) {
                localVarQueryParameter['fetchRhit'] = fetchRhit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsPost: async (id: string, label: Label, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an account
         * @param {string} id The id of record
         * @param {AccountPatchRequest} accountPatchRequest Updated account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdPatch: async (id: string, accountPatchRequest: AccountPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id)
            // verify required parameter 'accountPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new account
         * @param {Account} account Account data
         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsPost: async (account: Account, dryRun?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account)
            const localVarPath = `/api/accounts_mgmt/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch certificates of a particular type
         * @param {CertificatesRequest} certificatesRequest # The payload depends on the type of the requested certificate The examples for supported types: * {\&quot;type\&quot;: \&quot;sca\&quot;, \&quot;arch\&quot;: \&quot;x86_64\&quot;} 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CertificatesPost: async (certificatesRequest: CertificatesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificatesRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1CertificatesPost', 'certificatesRequest', certificatesRequest)
            const localVarPath = `/api/accounts_mgmt/v1/certificates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certificatesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of cloud resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/cloud_resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a cloud resource
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1CloudResourcesIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/cloud_resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a cloud resource
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1CloudResourcesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/cloud_resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a cloud resource
         * @param {string} id The id of record
         * @param {CloudResource} cloudResource Updated cloud resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesIdPatch: async (id: string, cloudResource: CloudResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1CloudResourcesIdPatch', 'id', id)
            // verify required parameter 'cloudResource' is not null or undefined
            assertParamExists('apiAccountsMgmtV1CloudResourcesIdPatch', 'cloudResource', cloudResource)
            const localVarPath = `/api/accounts_mgmt/v1/cloud_resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new cloud resource
         * @param {CloudResource} cloudResource Cloud resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesPost: async (cloudResource: CloudResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cloudResource' is not null or undefined
            assertParamExists('apiAccountsMgmtV1CloudResourcesPost', 'cloudResource', cloudResource)
            const localVarPath = `/api/accounts_mgmt/v1/cloud_resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authorizes new cluster creation against an exsiting RH Subscription.
         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterAuthorizationsPost: async (clusterAuthorizationRequest: ClusterAuthorizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterAuthorizationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterAuthorizationsPost', 'clusterAuthorizationRequest', clusterAuthorizationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clusterAuthorizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterRegistrationsPost: async (clusterRegistrationRequest: ClusterRegistrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterRegistrationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterRegistrationsPost', 'clusterRegistrationRequest', clusterRegistrationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clusterRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window.
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterTransfersGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/cluster_transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update specific cluster transfer
         * @param {string} id The id of record
         * @param {ClusterTransferPatchRequest} clusterTransferPatchRequest Updated cluster transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterTransfersIdPatch: async (id: string, clusterTransferPatchRequest: ClusterTransferPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterTransfersIdPatch', 'id', id)
            // verify required parameter 'clusterTransferPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterTransfersIdPatch', 'clusterTransferPatchRequest', clusterTransferPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/cluster_transfers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clusterTransferPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate cluster transfer.
         * @param {ClusterTransferRequest} clusterTransferRequest The contents of the cluster transfer creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterTransfersPost: async (clusterTransferRequest: ClusterTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterTransferRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterTransfersPost', 'clusterTransferRequest', clusterTransferRequest)
            const localVarPath = `/api/accounts_mgmt/v1/cluster_transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clusterTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of skus
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/config/skus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a sku
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ConfigSkusIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/config/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sku
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ConfigSkusIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/config/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Sku
         * @param {string} id The id of record
         * @param {SKU} sKU Updated sku data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusIdPatch: async (id: string, sKU: SKU, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ConfigSkusIdPatch', 'id', id)
            // verify required parameter 'sKU' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ConfigSkusIdPatch', 'sKU', sKU)
            const localVarPath = `/api/accounts_mgmt/v1/config/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sKU, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new sku
         * @param {SKU} sKU Sku data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusPost: async (sKU: SKU, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sKU' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ConfigSkusPost', 'sKU', sKU)
            const localVarPath = `/api/accounts_mgmt/v1/config/skus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sKU, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the authenticated account
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/current_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of deleted subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1DeletedSubscriptionsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/deleted_subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of errors
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/errors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an error by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query a feature toggle by id
         * @param {string} id The id of record
         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id)
            // verify required parameter 'featureToggleQueryRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'featureToggleQueryRequest', featureToggleQueryRequest)
            const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureToggleQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1LabelsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/labels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a console.redhat.com landing page content JSON schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1LandingPageSelfServiceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/landing_page/self_service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of metrics
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1MetricsGet: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify the owner of cluster/subscription
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1NotifyPost: async (notificationRequest: NotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/notify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of organizations
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an organization by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsPost: async (id: string, label: Label, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an organization
         * @param {string} id The id of record
         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdPatch: async (id: string, organizationPatchRequest: OrganizationPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id)
            // verify required parameter 'organizationPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a summary of organizations clusters based on metrics
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an account group assignment
         * @param {string} orgId The id of organization
         * @param {string} acctGrpAsgnId The id of account group assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete: async (orgId: string, acctGrpAsgnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete', 'orgId', orgId)
            // verify required parameter 'acctGrpAsgnId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete', 'acctGrpAsgnId', acctGrpAsgnId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments/{acctGrpAsgnId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"acctGrpAsgnId"}}`, encodeURIComponent(String(acctGrpAsgnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account group assignment by id
         * @param {string} orgId The id of organization
         * @param {string} acctGrpAsgnId The id of account group assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet: async (orgId: string, acctGrpAsgnId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet', 'orgId', orgId)
            // verify required parameter 'acctGrpAsgnId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet', 'acctGrpAsgnId', acctGrpAsgnId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments/{acctGrpAsgnId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"acctGrpAsgnId"}}`, encodeURIComponent(String(acctGrpAsgnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of account group assignments for the given org
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new AccountGroupAssignment
         * @param {string} orgId The id of organization
         * @param {AccountGroupAssignment} accountGroupAssignment New AccountGroup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost: async (orgId: string, accountGroupAssignment: AccountGroupAssignment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost', 'orgId', orgId)
            // verify required parameter 'accountGroupAssignment' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost', 'accountGroupAssignment', accountGroupAssignment)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountGroupAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an account group
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete: async (orgId: string, acctGrpId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete', 'orgId', orgId)
            // verify required parameter 'acctGrpId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete', 'acctGrpId', acctGrpId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"acctGrpId"}}`, encodeURIComponent(String(acctGrpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account group by id
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet: async (orgId: string, acctGrpId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet', 'orgId', orgId)
            // verify required parameter 'acctGrpId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet', 'acctGrpId', acctGrpId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"acctGrpId"}}`, encodeURIComponent(String(acctGrpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an account group
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {AccountGroupRequest} accountGroupRequest Updated account group data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch: async (orgId: string, acctGrpId: string, accountGroupRequest: AccountGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch', 'orgId', orgId)
            // verify required parameter 'acctGrpId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch', 'acctGrpId', acctGrpId)
            // verify required parameter 'accountGroupRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch', 'accountGroupRequest', accountGroupRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"acctGrpId"}}`, encodeURIComponent(String(acctGrpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of account groups for the given org
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_groups`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new AccountGroup
         * @param {string} orgId The id of organization
         * @param {AccountGroupRequest} accountGroupRequest New AccountGroup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost: async (orgId: string, accountGroupRequest: AccountGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost', 'orgId', orgId)
            // verify required parameter 'accountGroupRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost', 'accountGroupRequest', accountGroupRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/account_groups`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of consumed quota for an organization
         * @param {string} orgId The id of organization
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet: async (orgId: string, forceRecalc?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/consumed_quota`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (forceRecalc !== undefined) {
                localVarQueryParameter['forceRecalc'] = forceRecalc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a summary of quota cost
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (orgId: string, search?: string, fetchRelatedResources?: boolean, forceRecalc?: boolean, fetchCloudAccounts?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fetchRelatedResources !== undefined) {
                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;
            }

            if (forceRecalc !== undefined) {
                localVarQueryParameter['forceRecalc'] = forceRecalc;
            }

            if (fetchCloudAccounts !== undefined) {
                localVarQueryParameter['fetchCloudAccounts'] = fetchCloudAccounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new resource quota
         * @param {string} orgId The id of organization
         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId)
            // verify required parameter 'resourceQuotaRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'resourceQuotaRequest', resourceQuotaRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (orgId: string, quotaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a resource quota by id
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (orgId: string, quotaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId)
            // verify required parameter 'resourceQuotaRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'resourceQuotaRequest', resourceQuotaRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new organization
         * @param {Organization} organization Organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization)
            const localVarPath = `/api/accounts_mgmt/v1/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all plans
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a plan by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a pull secret
         * @param {string} externalResourceId The external resource id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (externalResourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalResourceId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1PullSecretsExternalResourceIdDelete', 'externalResourceId', externalResourceId)
            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`
                .replace(`{${"externalResourceId"}}`, encodeURIComponent(String(externalResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsPost: async (pullSecretRequest: PullSecretRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pullSecretRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest)
            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a summary of quota cost for the authenticated user
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotaCostGet: async (search?: string, fetchRelatedResources?: boolean, fetchCloudAccounts?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/quota_cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fetchRelatedResources !== undefined) {
                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;
            }

            if (fetchCloudAccounts !== undefined) {
                localVarQueryParameter['fetchCloudAccounts'] = fetchCloudAccounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of UHC product Quota Rules
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotaRulesGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/quota_rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of quotas
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a quota
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1QuotasIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/quotas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a quota
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1QuotasIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/quotas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a quota
         * @param {string} id The id of record
         * @param {Quota} quota Updated quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasIdPatch: async (id: string, quota: Quota, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1QuotasIdPatch', 'id', id)
            // verify required parameter 'quota' is not null or undefined
            assertParamExists('apiAccountsMgmtV1QuotasIdPatch', 'quota', quota)
            const localVarPath = `/api/accounts_mgmt/v1/quotas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quota, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new quota
         * @param {Quota} quota Quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasPost: async (quota: Quota, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quota' is not null or undefined
            assertParamExists('apiAccountsMgmtV1QuotasPost', 'quota', quota)
            const localVarPath = `/api/accounts_mgmt/v1/quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quota, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of registries
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/registries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an registry by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Registry Credentials
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a registry credential by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a registry credentials by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a registry credential
         * @param {string} id The id of record
         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdPatch: async (id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id)
            // verify required parameter 'registryCredentialPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'registryCredentialPatchRequest', registryCredentialPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryCredentialPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request the creation of a registry credential
         * @param {RegistryCredential} registryCredential Registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsPost: async (registryCredential: RegistryCredential, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryCredential' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ReservedResourcesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ResourceQuotaGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of role bindings
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role binding
         * @param {string} id The id of record
         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdPatch: async (id: string, roleBindingRequest: RoleBindingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id)
            // verify required parameter 'roleBindingRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new role binding
         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsPost: async (roleBindingCreateRequest: RoleBindingCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleBindingCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of roles
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesGet: async (page?: number, size?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create or renew the entitlement to support a product for the user\'s organization.
         * @param {string} product The product for self_entitlement. The supported products are [rosa].
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SelfEntitlementProductPost: async (product: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SelfEntitlementProductPost', 'product', product)
            const localVarPath = `/api/accounts_mgmt/v1/self_entitlement/{product}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of UHC product SKU Rules
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a sku rule
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkuRulesIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sku rules by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a sku rule
         * @param {string} id The id of record
         * @param {SkuRules} skuRules Updated sku rule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdPatch: async (id: string, skuRules: SkuRules, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkuRulesIdPatch', 'id', id)
            // verify required parameter 'skuRules' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkuRulesIdPatch', 'skuRules', skuRules)
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(skuRules, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new sku rule
         * @param {SkuRules} skuRules Sku rule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesPost: async (skuRules: SkuRules, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skuRules' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkuRulesPost', 'skuRules', skuRules)
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(skuRules, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of UHC product SKUs
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusGet: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/skus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sku by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsGet: async (page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fetchAccounts !== undefined) {
                localVarQueryParameter['fetchAccounts'] = fetchAccounts;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a subscription by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a subscription by id
         * @param {string} id The id of record
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdGet: async (id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchAccounts !== undefined) {
                localVarQueryParameter['fetchAccounts'] = fetchAccounts;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fetchCpuAndSocket !== undefined) {
                localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (id: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (id: string, label: Label, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription\'s metrics by metric name
         * @param {string} id The id of record
         * @param {string} metricName The name of the metric
         * @param {string} [search] The &#x60;search&#x60; paramter specifies the PromQL selector. The syntax is defined by Prometheus at https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors. It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection. For example, in order to retrieve subscription_sync_total with names starting with &#x60;managed&#x60; and with a channel &#x3D; &#x60;production&#x60;:  &#x60;&#x60;&#x60; name&#x3D;~\&#39;managed.*\&#39;,channel&#x3D;\&#39;production\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the records will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet: async (id: string, metricName: string, search?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet', 'id', id)
            // verify required parameter 'metricName' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet', 'metricName', metricName)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/metrics/{metric_name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"metric_name"}}`, encodeURIComponent(String(metricName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify the owner of a subscription
         * @param {string} id The id of record
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (id: string, notificationRequest: NotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id)
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} id The id of record
         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdPatch: async (id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id)
            // verify required parameter 'subscriptionPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (id: string, page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new subscription
         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsPost: async (subscriptionCreateRequest: SubscriptionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a notification contact by subscription and account id
         * @param {string} subId The id of subscription
         * @param {string} accountId The id of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (subId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'accountId', accountId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of notification contacts for the given subscription
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add an account as a notification contact to this subscription
         * @param {string} subId The id of subscription
         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId)
            // verify required parameter 'notificationContactCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'notificationContactCreateRequest', notificationContactCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationContactCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete: async (subId: string, reservedResourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete', 'subId', subId)
            // verify required parameter 'reservedResourceId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete', 'reservedResourceId', reservedResourceId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)))
                .replace(`{${"reservedResourceId"}}`, encodeURIComponent(String(reservedResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (subId: string, reservedResourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId)
            // verify required parameter 'reservedResourceId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'reservedResourceId', reservedResourceId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)))
                .replace(`{${"reservedResourceId"}}`, encodeURIComponent(String(reservedResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a reserved resource
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {ReservedResourcePatchRequest} reservedResourcePatchRequest Updated reserved resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch: async (subId: string, reservedResourceId: string, reservedResourcePatchRequest: ReservedResourcePatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch', 'subId', subId)
            // verify required parameter 'reservedResourceId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch', 'reservedResourceId', reservedResourceId)
            // verify required parameter 'reservedResourcePatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch', 'reservedResourcePatchRequest', reservedResourcePatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)))
                .replace(`{${"reservedResourceId"}}`, encodeURIComponent(String(reservedResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservedResourcePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription role bindings
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet: async (subId: string, page?: number, size?: number, search?: string, orderBy?: string, fetchAccounts?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet', 'subId', subId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (fetchAccounts !== undefined) {
                localVarQueryParameter['fetchAccounts'] = fetchAccounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a subscription role binding
         * @param {string} id The id of record
         * @param {string} subId The id of subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete: async (id: string, subId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete', 'id', id)
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete', 'subId', subId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Subscription Role Binding by id
         * @param {string} id The id of record
         * @param {string} subId The id of subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet: async (id: string, subId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet', 'id', id)
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet', 'subId', subId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new subscription role binding
         * @param {string} subId The id of subscription
         * @param {SubscriptionRoleBindingCreateRequest} subscriptionRoleBindingCreateRequest Subscription role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost: async (subId: string, subscriptionRoleBindingCreateRequest: SubscriptionRoleBindingCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost', 'subId', subId)
            // verify required parameter 'subscriptionRoleBindingCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost', 'subscriptionRoleBindingCreateRequest', subscriptionRoleBindingCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionRoleBindingCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a support case
         * @param {string} caseId The id of a support case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId)
            const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create a support case for the subscription
         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesPost: async (supportCasesRequest: SupportCasesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportCasesRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest)
            const localVarPath = `/api/accounts_mgmt/v1/support_cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds the account owner of the provided token
         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1TokenAuthorizationPost: async (tokenAuthorizationRequest: TokenAuthorizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenAuthorizationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1TokenAuthorizationPost', 'tokenAuthorizationRequest', tokenAuthorizationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenAuthorizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review an account\'s access to perform an action on a particular resource or resource type
         * @param {AccessReview} accessReview Access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1AccessReviewPost: async (accessReview: AccessReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview)
            const localVarPath = `/api/authorizations/v1/access_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review an account\'s capabilities
         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1CapabilityReviewPost: async (capabilityReviewRequest: CapabilityReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'capabilityReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest)
            const localVarPath = `/api/authorizations/v1/capability_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(capabilityReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ExportControlReviewPost: async (exportControlReviewRequest: ExportControlReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportControlReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1ExportControlReviewPost', 'exportControlReviewRequest', exportControlReviewRequest)
            const localVarPath = `/api/authorizations/v1/export_control_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportControlReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review feature to perform an action on it such as toggle a feature on/off
         * @param {FeatureReview} featureReview Feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1FeatureReviewPost: async (featureReview: FeatureReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview)
            const localVarPath = `/api/authorizations/v1/feature_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
         * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ResourceReviewPost: async (resourceReviewRequest: ResourceReviewRequest, reduceClusterList?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest)
            const localVarPath = `/api/authorizations/v1/resource_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reduceClusterList !== undefined) {
                localVarQueryParameter['reduceClusterList'] = reduceClusterList;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review your ability to perform an action on a particular resource or resource type
         * @param {SelfAccessReview} selfAccessReview Self access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfAccessReviewPost: async (selfAccessReview: SelfAccessReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfAccessReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview)
            const localVarPath = `/api/authorizations/v1/self_access_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review your ability to toggle a feature
         * @param {SelfFeatureReview} selfFeatureReview Self feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfFeatureReviewPost: async (selfFeatureReview: SelfFeatureReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfFeatureReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview)
            const localVarPath = `/api/authorizations/v1/self_feature_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
         * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfResourceReviewPost: async (selfResourceReviewRequest: SelfResourceReviewRequest, reduceClusterList?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfResourceReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfResourceReviewPost', 'selfResourceReviewRequest', selfResourceReviewRequest)
            const localVarPath = `/api/authorizations/v1/self_resource_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reduceClusterList !== undefined) {
                localVarQueryParameter['reduceClusterList'] = reduceClusterList;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfResourceReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost: async (selfTermsReview: SelfTermsReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfTermsReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview)
            const localVarPath = `/api/authorizations/v1/self_terms_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review an account\'s status of Terms
         * @param {TermsReview} termsReview Data to check terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'termsReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview)
            const localVarPath = `/api/authorizations/v1/terms_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccessTokenPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of accounts
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an account by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchRhit] If true, includes the RHIT account_id in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchRhit?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, fetchRhit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an account
         * @param {string} id The id of record
         * @param {AccountPatchRequest} accountPatchRequest Updated account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new account
         * @param {Account} account Account data
         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch certificates of a particular type
         * @param {CertificatesRequest} certificatesRequest # The payload depends on the type of the requested certificate The examples for supported types: * {\&quot;type\&quot;: \&quot;sca\&quot;, \&quot;arch\&quot;: \&quot;x86_64\&quot;} 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CertificatesPost(certificatesRequest: CertificatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CertificatesPost(certificatesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of cloud resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CloudResourcesGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CloudResourcesGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a cloud resource
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CloudResourcesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CloudResourcesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a cloud resource
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CloudResourcesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CloudResourcesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a cloud resource
         * @param {string} id The id of record
         * @param {CloudResource} cloudResource Updated cloud resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CloudResourcesIdPatch(id: string, cloudResource: CloudResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CloudResourcesIdPatch(id, cloudResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new cloud resource
         * @param {CloudResource} cloudResource Cloud resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CloudResourcesPost(cloudResource: CloudResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CloudResourcesPost(cloudResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Authorizes new cluster creation against an exsiting RH Subscription.
         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window.
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterTransfersGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterTransferList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterTransfersGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update specific cluster transfer
         * @param {string} id The id of record
         * @param {ClusterTransferPatchRequest} clusterTransferPatchRequest Updated cluster transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterTransfersIdPatch(id: string, clusterTransferPatchRequest: ClusterTransferPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterTransfersIdPatch(id, clusterTransferPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Initiate cluster transfer.
         * @param {ClusterTransferRequest} clusterTransferRequest The contents of the cluster transfer creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterTransfersPost(clusterTransferRequest: ClusterTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterTransfersPost(clusterTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of skus
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ConfigSkusGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ConfigSkusGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a sku
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ConfigSkusIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ConfigSkusIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a sku
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ConfigSkusIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ConfigSkusIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Sku
         * @param {string} id The id of record
         * @param {SKU} sKU Updated sku data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ConfigSkusIdPatch(id: string, sKU: SKU, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ConfigSkusIdPatch(id, sKU, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new sku
         * @param {SKU} sKU Sku data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ConfigSkusPost(sKU: SKU, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ConfigSkusPost(sKU, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the authenticated account
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of deleted subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1DeletedSubscriptionsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedSubscriptionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1DeletedSubscriptionsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of errors
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an error by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ErrorsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query a feature toggle by id
         * @param {string} id The id of record
         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a console.redhat.com landing page content JSON schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1LandingPageSelfServiceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLandingPageSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LandingPageSelfServiceGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of metrics
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1MetricsGet(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Notify the owner of cluster/subscription
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of organizations
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an organization by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an organization
         * @param {string} id The id of record
         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a summary of organizations clusters based on metrics
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an account group assignment
         * @param {string} orgId The id of organization
         * @param {string} acctGrpAsgnId The id of account group assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(orgId: string, acctGrpAsgnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(orgId, acctGrpAsgnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get account group assignment by id
         * @param {string} orgId The id of organization
         * @param {string} acctGrpAsgnId The id of account group assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(orgId: string, acctGrpAsgnId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroupAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(orgId, acctGrpAsgnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of account group assignments for the given org
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroupAssignmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(orgId, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new AccountGroupAssignment
         * @param {string} orgId The id of organization
         * @param {AccountGroupAssignment} accountGroupAssignment New AccountGroup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(orgId: string, accountGroupAssignment: AccountGroupAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroupAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(orgId, accountGroupAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an account group
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(orgId: string, acctGrpId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(orgId, acctGrpId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get account group by id
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(orgId: string, acctGrpId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(orgId, acctGrpId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an account group
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {AccountGroupRequest} accountGroupRequest Updated account group data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(orgId: string, acctGrpId: string, accountGroupRequest: AccountGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(orgId, acctGrpId, accountGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of account groups for the given org
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroupList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(orgId, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new AccountGroup
         * @param {string} orgId The id of organization
         * @param {AccountGroupRequest} accountGroupRequest New AccountGroup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(orgId: string, accountGroupRequest: AccountGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(orgId, accountGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of consumed quota for an organization
         * @param {string} orgId The id of organization
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(orgId: string, forceRecalc?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumedQuotaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(orgId, forceRecalc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a summary of quota cost
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, forceRecalc?: boolean, fetchCloudAccounts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new resource quota
         * @param {string} orgId The id of organization
         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a resource quota by id
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new organization
         * @param {Organization} organization Organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all plans
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a plan by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PlansIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a pull secret
         * @param {string} externalResourceId The external resource id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a summary of quota cost for the authenticated user
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotaCostGet(search?: string, fetchRelatedResources?: boolean, fetchCloudAccounts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotaCostGet(search, fetchRelatedResources, fetchCloudAccounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of UHC product Quota Rules
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotaRulesGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaRulesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotaRulesGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of quotas
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotasGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotasGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a quota
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotasIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotasIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a quota
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotasIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotasIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a quota
         * @param {string} id The id of record
         * @param {Quota} quota Updated quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotasIdPatch(id: string, quota: Quota, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotasIdPatch(id, quota, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new quota
         * @param {Quota} quota Quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1QuotasPost(quota: Quota, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1QuotasPost(quota, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of registries
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an registry by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistriesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Registry Credentials
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a registry credential by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a registry credentials by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a registry credential
         * @param {string} id The id of record
         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request the creation of a registry credential
         * @param {RegistryCredential} registryCredential Registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of role bindings
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a role binding
         * @param {string} id The id of record
         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new role binding
         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of roles
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RolesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create or renew the entitlement to support a product for the user\'s organization.
         * @param {string} product The product for self_entitlement. The supported products are [rosa].
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SelfEntitlementProductPost(product: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfEntitlementStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SelfEntitlementProductPost(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of UHC product SKU Rules
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesGet(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a sku rule
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a sku rules by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a sku rule
         * @param {string} id The id of record
         * @param {SkuRules} skuRules Updated sku rule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesIdPatch(id: string, skuRules: SkuRules, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdPatch(id, skuRules, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new sku rule
         * @param {SkuRules} skuRules Sku rule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesPost(skuRules: SkuRules, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesPost(skuRules, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of UHC product SKUs
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkusGet(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a sku by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkusIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a subscription by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a subscription by id
         * @param {string} id The id of record
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription\'s metrics by metric name
         * @param {string} id The id of record
         * @param {string} metricName The name of the metric
         * @param {string} [search] The &#x60;search&#x60; paramter specifies the PromQL selector. The syntax is defined by Prometheus at https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors. It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection. For example, in order to retrieve subscription_sync_total with names starting with &#x60;managed&#x60; and with a channel &#x3D; &#x60;production&#x60;:  &#x60;&#x60;&#x60; name&#x3D;~\&#39;managed.*\&#39;,channel&#x3D;\&#39;production\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the records will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(id: string, metricName: string, search?: string, fields?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionMetricList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(id, metricName, search, fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Notify the owner of a subscription
         * @param {string} id The id of record
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} id The id of record
         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new subscription
         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a notification contact by subscription and account id
         * @param {string} subId The id of subscription
         * @param {string} accountId The id of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of notification contacts for the given subscription
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add an account as a notification contact to this subscription
         * @param {string} subId The id of subscription
         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(subId: string, reservedResourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(subId, reservedResourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a reserved resource
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {ReservedResourcePatchRequest} reservedResourcePatchRequest Updated reserved resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(subId: string, reservedResourceId: string, reservedResourcePatchRequest: ReservedResourcePatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(subId, reservedResourceId, reservedResourcePatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription role bindings
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(subId: string, page?: number, size?: number, search?: string, orderBy?: string, fetchAccounts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionRoleBindingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(subId, page, size, search, orderBy, fetchAccounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a subscription role binding
         * @param {string} id The id of record
         * @param {string} subId The id of subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(id: string, subId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(id, subId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a Subscription Role Binding by id
         * @param {string} id The id of record
         * @param {string} subId The id of subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(id: string, subId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionRoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(id, subId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new subscription role binding
         * @param {string} subId The id of subscription
         * @param {SubscriptionRoleBindingCreateRequest} subscriptionRoleBindingCreateRequest Subscription role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(subId: string, subscriptionRoleBindingCreateRequest: SubscriptionRoleBindingCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionRoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(subId, subscriptionRoleBindingCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a support case
         * @param {string} caseId The id of a support case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create a support case for the subscription
         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds the account owner of the provided token
         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review an account\'s access to perform an action on a particular resource or resource type
         * @param {AccessReview} accessReview Access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(accessReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review an account\'s capabilities
         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review feature to perform an action on it such as toggle a feature on/off
         * @param {FeatureReview} featureReview Feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(featureReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
         * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, reduceClusterList?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, reduceClusterList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review your ability to perform an action on a particular resource or resource type
         * @param {SelfAccessReview} selfAccessReview Self access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review your ability to toggle a feature
         * @param {SelfFeatureReview} selfFeatureReview Self feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
         * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, reduceClusterList?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, reduceClusterList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review an account\'s status of Terms
         * @param {TermsReview} termsReview Data to check terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(termsReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {
            return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of accounts
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList> {
            return localVarFp.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an account by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchRhit] If true, includes the RHIT account_id in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchRhit?: boolean, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, fetchRhit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an account
         * @param {string} id The id of record
         * @param {AccountPatchRequest} accountPatchRequest Updated account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new account
         * @param {Account} account Account data
         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch certificates of a particular type
         * @param {CertificatesRequest} certificatesRequest # The payload depends on the type of the requested certificate The examples for supported types: * {\&quot;type\&quot;: \&quot;sca\&quot;, \&quot;arch\&quot;: \&quot;x86_64\&quot;} 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CertificatesPost(certificatesRequest: CertificatesRequest, options?: any): AxiosPromise<Certificate> {
            return localVarFp.apiAccountsMgmtV1CertificatesPost(certificatesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of cloud resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<CloudResourceList> {
            return localVarFp.apiAccountsMgmtV1CloudResourcesGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a cloud resource
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1CloudResourcesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a cloud resource
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesIdGet(id: string, options?: any): AxiosPromise<CloudResource> {
            return localVarFp.apiAccountsMgmtV1CloudResourcesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a cloud resource
         * @param {string} id The id of record
         * @param {CloudResource} cloudResource Updated cloud resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesIdPatch(id: string, cloudResource: CloudResource, options?: any): AxiosPromise<CloudResource> {
            return localVarFp.apiAccountsMgmtV1CloudResourcesIdPatch(id, cloudResource, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new cloud resource
         * @param {CloudResource} cloudResource Cloud resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CloudResourcesPost(cloudResource: CloudResource, options?: any): AxiosPromise<CloudResource> {
            return localVarFp.apiAccountsMgmtV1CloudResourcesPost(cloudResource, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authorizes new cluster creation against an exsiting RH Subscription.
         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse> {
            return localVarFp.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse> {
            return localVarFp.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window.
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterTransfersGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ClusterTransferList> {
            return localVarFp.apiAccountsMgmtV1ClusterTransfersGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update specific cluster transfer
         * @param {string} id The id of record
         * @param {ClusterTransferPatchRequest} clusterTransferPatchRequest Updated cluster transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterTransfersIdPatch(id: string, clusterTransferPatchRequest: ClusterTransferPatchRequest, options?: any): AxiosPromise<ClusterTransfer> {
            return localVarFp.apiAccountsMgmtV1ClusterTransfersIdPatch(id, clusterTransferPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate cluster transfer.
         * @param {ClusterTransferRequest} clusterTransferRequest The contents of the cluster transfer creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterTransfersPost(clusterTransferRequest: ClusterTransferRequest, options?: any): AxiosPromise<ClusterTransfer> {
            return localVarFp.apiAccountsMgmtV1ClusterTransfersPost(clusterTransferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of skus
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<SkuList> {
            return localVarFp.apiAccountsMgmtV1ConfigSkusGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a sku
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1ConfigSkusIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sku
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusIdGet(id: string, options?: any): AxiosPromise<SKU> {
            return localVarFp.apiAccountsMgmtV1ConfigSkusIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Sku
         * @param {string} id The id of record
         * @param {SKU} sKU Updated sku data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusIdPatch(id: string, sKU: SKU, options?: any): AxiosPromise<SKU> {
            return localVarFp.apiAccountsMgmtV1ConfigSkusIdPatch(id, sKU, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new sku
         * @param {SKU} sKU Sku data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ConfigSkusPost(sKU: SKU, options?: any): AxiosPromise<SKU> {
            return localVarFp.apiAccountsMgmtV1ConfigSkusPost(sKU, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the authenticated account
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of deleted subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1DeletedSubscriptionsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<DeletedSubscriptionList> {
            return localVarFp.apiAccountsMgmtV1DeletedSubscriptionsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of errors
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {
            return localVarFp.apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an error by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {
            return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query a feature toggle by id
         * @param {string} id The id of record
         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle> {
            return localVarFp.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a console.redhat.com landing page content JSON schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1LandingPageSelfServiceGet(options?: any): AxiosPromise<SelfServiceLandingPageSchema> {
            return localVarFp.apiAccountsMgmtV1LandingPageSelfServiceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of metrics
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {
            return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify the owner of cluster/subscription
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of organizations
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an organization by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an organization
         * @param {string} id The id of record
         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a summary of organizations clusters based on metrics
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an account group assignment
         * @param {string} orgId The id of organization
         * @param {string} acctGrpAsgnId The id of account group assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(orgId: string, acctGrpAsgnId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(orgId, acctGrpAsgnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get account group assignment by id
         * @param {string} orgId The id of organization
         * @param {string} acctGrpAsgnId The id of account group assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(orgId: string, acctGrpAsgnId: string, options?: any): AxiosPromise<AccountGroupAssignment> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(orgId, acctGrpAsgnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of account group assignments for the given org
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<AccountGroupAssignmentList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new AccountGroupAssignment
         * @param {string} orgId The id of organization
         * @param {AccountGroupAssignment} accountGroupAssignment New AccountGroup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(orgId: string, accountGroupAssignment: AccountGroupAssignment, options?: any): AxiosPromise<AccountGroupAssignment> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(orgId, accountGroupAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an account group
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(orgId: string, acctGrpId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(orgId, acctGrpId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get account group by id
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(orgId: string, acctGrpId: string, options?: any): AxiosPromise<AccountGroup> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(orgId, acctGrpId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an account group
         * @param {string} orgId The id of organization
         * @param {string} acctGrpId The id of account group
         * @param {AccountGroupRequest} accountGroupRequest Updated account group data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(orgId: string, acctGrpId: string, accountGroupRequest: AccountGroupRequest, options?: any): AxiosPromise<AccountGroup> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(orgId, acctGrpId, accountGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of account groups for the given org
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<AccountGroupList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new AccountGroup
         * @param {string} orgId The id of organization
         * @param {AccountGroupRequest} accountGroupRequest New AccountGroup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(orgId: string, accountGroupRequest: AccountGroupRequest, options?: any): AxiosPromise<AccountGroup> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(orgId, accountGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of consumed quota for an organization
         * @param {string} orgId The id of organization
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(orgId: string, forceRecalc?: boolean, options?: any): AxiosPromise<ConsumedQuotaList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(orgId, forceRecalc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a summary of quota cost
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, forceRecalc?: boolean, fetchCloudAccounts?: boolean, options?: any): AxiosPromise<QuotaCostList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new resource quota
         * @param {string} orgId The id of organization
         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a resource quota by id
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new organization
         * @param {Organization} organization Organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {
            return localVarFp.apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all plans
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {
            return localVarFp.apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a plan by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {
            return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a pull secret
         * @param {string} externalResourceId The external resource id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg> {
            return localVarFp.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a summary of quota cost for the authenticated user
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotaCostGet(search?: string, fetchRelatedResources?: boolean, fetchCloudAccounts?: boolean, options?: any): AxiosPromise<QuotaCostList> {
            return localVarFp.apiAccountsMgmtV1QuotaCostGet(search, fetchRelatedResources, fetchCloudAccounts, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of UHC product Quota Rules
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotaRulesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<QuotaRulesList> {
            return localVarFp.apiAccountsMgmtV1QuotaRulesGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of quotas
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<QuotaList> {
            return localVarFp.apiAccountsMgmtV1QuotasGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a quota
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1QuotasIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a quota
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasIdGet(id: string, options?: any): AxiosPromise<Quota> {
            return localVarFp.apiAccountsMgmtV1QuotasIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a quota
         * @param {string} id The id of record
         * @param {Quota} quota Updated quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasIdPatch(id: string, quota: Quota, options?: any): AxiosPromise<Quota> {
            return localVarFp.apiAccountsMgmtV1QuotasIdPatch(id, quota, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new quota
         * @param {Quota} quota Quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1QuotasPost(quota: Quota, options?: any): AxiosPromise<Quota> {
            return localVarFp.apiAccountsMgmtV1QuotasPost(quota, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of registries
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList> {
            return localVarFp.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an registry by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {
            return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Registry Credentials
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a registry credential by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a registry credentials by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a registry credential
         * @param {string} id The id of record
         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request the creation of a registry credential
         * @param {RegistryCredential} registryCredential Registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {
            return localVarFp.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {
            return localVarFp.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of role bindings
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role binding
         * @param {string} id The id of record
         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new role binding
         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of roles
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {
            return localVarFp.apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {
            return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create or renew the entitlement to support a product for the user\'s organization.
         * @param {string} product The product for self_entitlement. The supported products are [rosa].
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SelfEntitlementProductPost(product: string, options?: any): AxiosPromise<SelfEntitlementStatus> {
            return localVarFp.apiAccountsMgmtV1SelfEntitlementProductPost(product, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of UHC product SKU Rules
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {
            return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a sku rule
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SkuRulesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sku rules by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {
            return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a sku rule
         * @param {string} id The id of record
         * @param {SkuRules} skuRules Updated sku rule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdPatch(id: string, skuRules: SkuRules, options?: any): AxiosPromise<SkuRules> {
            return localVarFp.apiAccountsMgmtV1SkuRulesIdPatch(id, skuRules, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new sku rule
         * @param {SkuRules} skuRules Sku rule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesPost(skuRules: SkuRules, options?: any): AxiosPromise<SkuRules> {
            return localVarFp.apiAccountsMgmtV1SkuRulesPost(skuRules, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of UHC product SKUs
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {
            return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sku by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {
            return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a subscription by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a subscription by id
         * @param {string} id The id of record
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription\'s metrics by metric name
         * @param {string} id The id of record
         * @param {string} metricName The name of the metric
         * @param {string} [search] The &#x60;search&#x60; paramter specifies the PromQL selector. The syntax is defined by Prometheus at https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors. It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection. For example, in order to retrieve subscription_sync_total with names starting with &#x60;managed&#x60; and with a channel &#x3D; &#x60;production&#x60;:  &#x60;&#x60;&#x60; name&#x3D;~\&#39;managed.*\&#39;,channel&#x3D;\&#39;production\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the records will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(id: string, metricName: string, search?: string, fields?: string, options?: any): AxiosPromise<SubscriptionMetricList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(id, metricName, search, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify the owner of a subscription
         * @param {string} id The id of record
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} id The id of record
         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new subscription
         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a notification contact by subscription and account id
         * @param {string} subId The id of subscription
         * @param {string} accountId The id of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of notification contacts for the given subscription
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add an account as a notification contact to this subscription
         * @param {string} subId The id of subscription
         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(subId: string, reservedResourceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(subId, reservedResourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a reserved resource
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {ReservedResourcePatchRequest} reservedResourcePatchRequest Updated reserved resource data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(subId: string, reservedResourceId: string, reservedResourcePatchRequest: ReservedResourcePatchRequest, options?: any): AxiosPromise<ReservedResource> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(subId, reservedResourceId, reservedResourcePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription role bindings
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(subId: string, page?: number, size?: number, search?: string, orderBy?: string, fetchAccounts?: boolean, options?: any): AxiosPromise<SubscriptionRoleBindingList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(subId, page, size, search, orderBy, fetchAccounts, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a subscription role binding
         * @param {string} id The id of record
         * @param {string} subId The id of subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(id: string, subId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(id, subId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Subscription Role Binding by id
         * @param {string} id The id of record
         * @param {string} subId The id of subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(id: string, subId: string, options?: any): AxiosPromise<SubscriptionRoleBinding> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(id, subId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new subscription role binding
         * @param {string} subId The id of subscription
         * @param {SubscriptionRoleBindingCreateRequest} subscriptionRoleBindingCreateRequest Subscription role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(subId: string, subscriptionRoleBindingCreateRequest: SubscriptionRoleBindingCreateRequest, options?: any): AxiosPromise<SubscriptionRoleBinding> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(subId, subscriptionRoleBindingCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a support case
         * @param {string} caseId The id of a support case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create a support case for the subscription
         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse> {
            return localVarFp.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds the account owner of the provided token
         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse> {
            return localVarFp.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review an account\'s access to perform an action on a particular resource or resource type
         * @param {AccessReview} accessReview Access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {
            return localVarFp.apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review an account\'s capabilities
         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview> {
            return localVarFp.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview> {
            return localVarFp.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review feature to perform an action on it such as toggle a feature on/off
         * @param {FeatureReview} featureReview Feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {
            return localVarFp.apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
         * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, reduceClusterList?: boolean, options?: any): AxiosPromise<ResourceReview> {
            return localVarFp.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, reduceClusterList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review your ability to perform an action on a particular resource or resource type
         * @param {SelfAccessReview} selfAccessReview Self access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse> {
            return localVarFp.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review your ability to toggle a feature
         * @param {SelfFeatureReview} selfFeatureReview Self feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {
            return localVarFp.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
         * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, reduceClusterList?: boolean, options?: any): AxiosPromise<SelfResourceReview> {
            return localVarFp.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, reduceClusterList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse> {
            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review an account\'s status of Terms
         * @param {TermsReview} termsReview Data to check terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {
            return localVarFp.apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Return access token generated from registries in docker format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccessTokenPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of accounts
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an account by id
     * @param {string} id The id of record
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {boolean} [fetchRhit] If true, includes the RHIT account_id in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchRhit?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, fetchRhit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an account
     * @param {string} id The id of record
     * @param {AccountPatchRequest} accountPatchRequest Updated account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new account
     * @param {Account} account Account data
     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch certificates of a particular type
     * @param {CertificatesRequest} certificatesRequest # The payload depends on the type of the requested certificate The examples for supported types: * {\&quot;type\&quot;: \&quot;sca\&quot;, \&quot;arch\&quot;: \&quot;x86_64\&quot;} 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CertificatesPost(certificatesRequest: CertificatesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CertificatesPost(certificatesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of cloud resources
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CloudResourcesGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CloudResourcesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a cloud resource
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CloudResourcesIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CloudResourcesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a cloud resource
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CloudResourcesIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CloudResourcesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a cloud resource
     * @param {string} id The id of record
     * @param {CloudResource} cloudResource Updated cloud resource data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CloudResourcesIdPatch(id: string, cloudResource: CloudResource, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CloudResourcesIdPatch(id, cloudResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new cloud resource
     * @param {CloudResource} cloudResource Cloud resource data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CloudResourcesPost(cloudResource: CloudResource, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CloudResourcesPost(cloudResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authorizes new cluster creation against an exsiting RH Subscription.
     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window.
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterTransfersGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterTransfersGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update specific cluster transfer
     * @param {string} id The id of record
     * @param {ClusterTransferPatchRequest} clusterTransferPatchRequest Updated cluster transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterTransfersIdPatch(id: string, clusterTransferPatchRequest: ClusterTransferPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterTransfersIdPatch(id, clusterTransferPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate cluster transfer.
     * @param {ClusterTransferRequest} clusterTransferRequest The contents of the cluster transfer creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterTransfersPost(clusterTransferRequest: ClusterTransferRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterTransfersPost(clusterTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of skus
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ConfigSkusGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ConfigSkusGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a sku
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ConfigSkusIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ConfigSkusIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sku
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ConfigSkusIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ConfigSkusIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Sku
     * @param {string} id The id of record
     * @param {SKU} sKU Updated sku data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ConfigSkusIdPatch(id: string, sKU: SKU, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ConfigSkusIdPatch(id, sKU, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new sku
     * @param {SKU} sKU Sku data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ConfigSkusPost(sKU: SKU, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ConfigSkusPost(sKU, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the authenticated account
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of deleted subscriptions
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1DeletedSubscriptionsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1DeletedSubscriptionsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of errors
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an error by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query a feature toggle by id
     * @param {string} id The id of record
     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a console.redhat.com landing page content JSON schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1LandingPageSelfServiceGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LandingPageSelfServiceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of metrics
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1MetricsGet(search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify the owner of cluster/subscription
     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of organizations
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an organization by id
     * @param {string} id The id of record
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an organization
     * @param {string} id The id of record
     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a summary of organizations clusters based on metrics
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an account group assignment
     * @param {string} orgId The id of organization
     * @param {string} acctGrpAsgnId The id of account group assignment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(orgId: string, acctGrpAsgnId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(orgId, acctGrpAsgnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get account group assignment by id
     * @param {string} orgId The id of organization
     * @param {string} acctGrpAsgnId The id of account group assignment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(orgId: string, acctGrpAsgnId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(orgId, acctGrpAsgnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of account group assignments for the given org
     * @param {string} orgId The id of organization
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new AccountGroupAssignment
     * @param {string} orgId The id of organization
     * @param {AccountGroupAssignment} accountGroupAssignment New AccountGroup data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(orgId: string, accountGroupAssignment: AccountGroupAssignment, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(orgId, accountGroupAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an account group
     * @param {string} orgId The id of organization
     * @param {string} acctGrpId The id of account group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(orgId: string, acctGrpId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(orgId, acctGrpId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get account group by id
     * @param {string} orgId The id of organization
     * @param {string} acctGrpId The id of account group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(orgId: string, acctGrpId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(orgId, acctGrpId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an account group
     * @param {string} orgId The id of organization
     * @param {string} acctGrpId The id of account group
     * @param {AccountGroupRequest} accountGroupRequest Updated account group data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(orgId: string, acctGrpId: string, accountGroupRequest: AccountGroupRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(orgId, acctGrpId, accountGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of account groups for the given org
     * @param {string} orgId The id of organization
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new AccountGroup
     * @param {string} orgId The id of organization
     * @param {AccountGroupRequest} accountGroupRequest New AccountGroup data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(orgId: string, accountGroupRequest: AccountGroupRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(orgId, accountGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of consumed quota for an organization
     * @param {string} orgId The id of organization
     * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(orgId: string, forceRecalc?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(orgId, forceRecalc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a summary of quota cost
     * @param {string} orgId The id of organization
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
     * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
     * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, forceRecalc?: boolean, fetchCloudAccounts?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of resource quota objects
     * @param {string} orgId The id of organization
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new resource quota
     * @param {string} orgId The id of organization
     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a resource quota
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a resource quota by id
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a resource quota
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new organization
     * @param {Organization} organization Organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all plans
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a plan by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PlansIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a pull secret
     * @param {string} externalResourceId The external resource id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return access token generated from registries in docker format
     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a summary of quota cost for the authenticated user
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
     * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotaCostGet(search?: string, fetchRelatedResources?: boolean, fetchCloudAccounts?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotaCostGet(search, fetchRelatedResources, fetchCloudAccounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of UHC product Quota Rules
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotaRulesGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotaRulesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of quotas
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotasGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotasGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a quota
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotasIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotasIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a quota
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotasIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotasIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a quota
     * @param {string} id The id of record
     * @param {Quota} quota Updated quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotasIdPatch(id: string, quota: Quota, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotasIdPatch(id, quota, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new quota
     * @param {Quota} quota Quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1QuotasPost(quota: Quota, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1QuotasPost(quota, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of registries
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an registry by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Registry Credentials
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a registry credential by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a registry credentials by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a registry credential
     * @param {string} id The id of record
     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request the creation of a registry credential
     * @param {RegistryCredential} registryCredential Registry credential data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of reserved resources
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of resource quota objects
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of role bindings
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role binding
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role binding
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role binding
     * @param {string} id The id of record
     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new role binding
     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of roles
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RolesIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create or renew the entitlement to support a product for the user\'s organization.
     * @param {string} product The product for self_entitlement. The supported products are [rosa].
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SelfEntitlementProductPost(product: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SelfEntitlementProductPost(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of UHC product SKU Rules
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a sku rule
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sku rules by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a sku rule
     * @param {string} id The id of record
     * @param {SkuRules} skuRules Updated sku rule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesIdPatch(id: string, skuRules: SkuRules, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdPatch(id, skuRules, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new sku rule
     * @param {SkuRules} skuRules Sku rule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesPost(skuRules: SkuRules, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesPost(skuRules, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of UHC product SKUs
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkusGet(search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sku by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkusIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of subscriptions
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a subscription by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a subscription by id
     * @param {string} id The id of record
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription\'s metrics by metric name
     * @param {string} id The id of record
     * @param {string} metricName The name of the metric
     * @param {string} [search] The &#x60;search&#x60; paramter specifies the PromQL selector. The syntax is defined by Prometheus at https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors. It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection. For example, in order to retrieve subscription_sync_total with names starting with &#x60;managed&#x60; and with a channel &#x3D; &#x60;production&#x60;:  &#x60;&#x60;&#x60; name&#x3D;~\&#39;managed.*\&#39;,channel&#x3D;\&#39;production\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the records will be returned.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(id: string, metricName: string, search?: string, fields?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(id, metricName, search, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify the owner of a subscription
     * @param {string} id The id of record
     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a subscription
     * @param {string} id The id of record
     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of reserved resources
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new subscription
     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a notification contact by subscription and account id
     * @param {string} subId The id of subscription
     * @param {string} accountId The id of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of notification contacts for the given subscription
     * @param {string} subId The id of subscription
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add an account as a notification contact to this subscription
     * @param {string} subId The id of subscription
     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete reserved resources by id
     * @param {string} subId The id of subscription
     * @param {string} reservedResourceId The id of reserved resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(subId: string, reservedResourceId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reserved resources by id
     * @param {string} subId The id of subscription
     * @param {string} reservedResourceId The id of reserved resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a reserved resource
     * @param {string} subId The id of subscription
     * @param {string} reservedResourceId The id of reserved resource
     * @param {ReservedResourcePatchRequest} reservedResourcePatchRequest Updated reserved resource data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(subId: string, reservedResourceId: string, reservedResourcePatchRequest: ReservedResourcePatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(subId, reservedResourceId, reservedResourcePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription role bindings
     * @param {string} subId The id of subscription
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(subId: string, page?: number, size?: number, search?: string, orderBy?: string, fetchAccounts?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(subId, page, size, search, orderBy, fetchAccounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a subscription role binding
     * @param {string} id The id of record
     * @param {string} subId The id of subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(id: string, subId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(id, subId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Subscription Role Binding by id
     * @param {string} id The id of record
     * @param {string} subId The id of subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(id: string, subId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(id, subId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new subscription role binding
     * @param {string} subId The id of subscription
     * @param {SubscriptionRoleBindingCreateRequest} subscriptionRoleBindingCreateRequest Subscription role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(subId: string, subscriptionRoleBindingCreateRequest: SubscriptionRoleBindingCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(subId, subscriptionRoleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a support case
     * @param {string} caseId The id of a support case
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create a support case for the subscription
     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds the account owner of the provided token
     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review an account\'s access to perform an action on a particular resource or resource type
     * @param {AccessReview} accessReview Access review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review an account\'s capabilities
     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review feature to perform an action on it such as toggle a feature on/off
     * @param {FeatureReview} featureReview Feature review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
     * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, reduceClusterList?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, reduceClusterList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review your ability to perform an action on a particular resource or resource type
     * @param {SelfAccessReview} selfAccessReview Self access review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review your ability to toggle a feature
     * @param {SelfFeatureReview} selfFeatureReview Self feature review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
     * @param {boolean} [reduceClusterList] If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, reduceClusterList?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, reduceClusterList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review your status of Terms
     * @param {SelfTermsReview} selfTermsReview Data to check self terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review an account\'s status of Terms
     * @param {TermsReview} termsReview Data to check terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(this.axios, this.basePath));
    }
}


