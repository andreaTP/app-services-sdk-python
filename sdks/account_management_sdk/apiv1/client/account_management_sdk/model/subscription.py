"""
    Account Management Service API

    Manage user subscriptions and clusters  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from account_management_sdk.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from account_management_sdk.exceptions import ApiAttributeError


def lazy_import():
    from account_management_sdk.model.account import Account
    from account_management_sdk.model.account_reference import AccountReference
    from account_management_sdk.model.capability import Capability
    from account_management_sdk.model.label import Label
    from account_management_sdk.model.one_metric import OneMetric
    from account_management_sdk.model.plan import Plan
    from account_management_sdk.model.subscription_all_of import SubscriptionAllOf
    from account_management_sdk.model.subscription_common_fields import SubscriptionCommonFields
    globals()['Account'] = Account
    globals()['AccountReference'] = AccountReference
    globals()['Capability'] = Capability
    globals()['Label'] = Label
    globals()['OneMetric'] = OneMetric
    globals()['Plan'] = Plan
    globals()['SubscriptionAllOf'] = SubscriptionAllOf
    globals()['SubscriptionCommonFields'] = SubscriptionCommonFields


class Subscription(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('product_bundle',): {
            'OPENSHIFT': "Openshift",
            'JBOSS-MIDDLEWARE': "JBoss-Middleware",
            'IBM-CLOUDPAK': "IBM-CloudPak",
        },
        ('service_level',): {
            'L1-L3': "L1-L3",
            'L3-ONLY': "L3-only",
        },
        ('support_level',): {
            'EVAL': "Eval",
            'STANDARD': "Standard",
            'PREMIUM': "Premium",
            'SELF-SUPPORT': "Self-Support",
            'NONE': "None",
        },
        ('system_units',): {
            'CORES/VCPU': "Cores/vCPU",
            'SOCKETS': "Sockets",
        },
        ('usage',): {
            'PRODUCTION': "Production",
            'DEVELOPMENT/TEST': "Development/Test",
            'DISASTER_RECOVERY': "Disaster Recovery",
            'ACADEMIC': "Academic",
        },
    }

    validations = {
        ('metrics',): {
            'max_items': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'managed': (bool,),  # noqa: E501
            'href': (str,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'kind': (str,),  # noqa: E501
            'billing_expiration_date': (datetime,),  # noqa: E501
            'billing_marketplace_account': (str,),  # noqa: E501
            'cloud_account_id': (str,),  # noqa: E501
            'cloud_provider_id': (str,),  # noqa: E501
            'cluster_billing_model': (str,),  # noqa: E501
            'cluster_id': (str,),  # noqa: E501
            'console_url': (str,),  # noqa: E501
            'consumer_uuid': (str,),  # noqa: E501
            'cpu_total': (int,),  # noqa: E501
            'creator_id': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'external_cluster_id': (str,),  # noqa: E501
            'last_reconcile_date': (datetime,),  # noqa: E501
            'last_released_at': (datetime,),  # noqa: E501
            'last_telemetry_date': (datetime,),  # noqa: E501
            'organization_id': (str,),  # noqa: E501
            'plan_id': (str,),  # noqa: E501
            'product_bundle': (str,),  # noqa: E501
            'provenance': (str,),  # noqa: E501
            'region_id': (str,),  # noqa: E501
            'released': (bool,),  # noqa: E501
            'service_level': (str,),  # noqa: E501
            'socket_total': (int,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'support_level': (str,),  # noqa: E501
            'system_units': (str,),  # noqa: E501
            'trial_end_date': (datetime,),  # noqa: E501
            'usage': (str,),  # noqa: E501
            'capabilities': ([Capability],),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'creator': (AccountReference,),  # noqa: E501
            'eval_expiration_date': (datetime,),  # noqa: E501
            'labels': ([Label],),  # noqa: E501
            'metrics': ([OneMetric],),  # noqa: E501
            'notification_contacts': ([Account],),  # noqa: E501
            'plan': (Plan,),  # noqa: E501
            'updated_at': (datetime,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'managed': 'managed',  # noqa: E501
        'href': 'href',  # noqa: E501
        'id': 'id',  # noqa: E501
        'kind': 'kind',  # noqa: E501
        'billing_expiration_date': 'billing_expiration_date',  # noqa: E501
        'billing_marketplace_account': 'billing_marketplace_account',  # noqa: E501
        'cloud_account_id': 'cloud_account_id',  # noqa: E501
        'cloud_provider_id': 'cloud_provider_id',  # noqa: E501
        'cluster_billing_model': 'cluster_billing_model',  # noqa: E501
        'cluster_id': 'cluster_id',  # noqa: E501
        'console_url': 'console_url',  # noqa: E501
        'consumer_uuid': 'consumer_uuid',  # noqa: E501
        'cpu_total': 'cpu_total',  # noqa: E501
        'creator_id': 'creator_id',  # noqa: E501
        'display_name': 'display_name',  # noqa: E501
        'external_cluster_id': 'external_cluster_id',  # noqa: E501
        'last_reconcile_date': 'last_reconcile_date',  # noqa: E501
        'last_released_at': 'last_released_at',  # noqa: E501
        'last_telemetry_date': 'last_telemetry_date',  # noqa: E501
        'organization_id': 'organization_id',  # noqa: E501
        'plan_id': 'plan_id',  # noqa: E501
        'product_bundle': 'product_bundle',  # noqa: E501
        'provenance': 'provenance',  # noqa: E501
        'region_id': 'region_id',  # noqa: E501
        'released': 'released',  # noqa: E501
        'service_level': 'service_level',  # noqa: E501
        'socket_total': 'socket_total',  # noqa: E501
        'status': 'status',  # noqa: E501
        'support_level': 'support_level',  # noqa: E501
        'system_units': 'system_units',  # noqa: E501
        'trial_end_date': 'trial_end_date',  # noqa: E501
        'usage': 'usage',  # noqa: E501
        'capabilities': 'capabilities',  # noqa: E501
        'created_at': 'created_at',  # noqa: E501
        'creator': 'creator',  # noqa: E501
        'eval_expiration_date': 'eval_expiration_date',  # noqa: E501
        'labels': 'labels',  # noqa: E501
        'metrics': 'metrics',  # noqa: E501
        'notification_contacts': 'notification_contacts',  # noqa: E501
        'plan': 'plan',  # noqa: E501
        'updated_at': 'updated_at',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Subscription - a model defined in OpenAPI

        Keyword Args:
            managed (bool):
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            href (str): [optional]  # noqa: E501
            id (str): [optional]  # noqa: E501
            kind (str): [optional]  # noqa: E501
            billing_expiration_date (datetime): If set, the date the subscription expires based on the billing model. [optional]  # noqa: E501
            billing_marketplace_account (str): [optional]  # noqa: E501
            cloud_account_id (str): [optional]  # noqa: E501
            cloud_provider_id (str): [optional]  # noqa: E501
            cluster_billing_model (str): [optional]  # noqa: E501
            cluster_id (str): [optional]  # noqa: E501
            console_url (str): [optional]  # noqa: E501
            consumer_uuid (str): [optional]  # noqa: E501
            cpu_total (int): [optional]  # noqa: E501
            creator_id (str): [optional]  # noqa: E501
            display_name (str): [optional]  # noqa: E501
            external_cluster_id (str): [optional]  # noqa: E501
            last_reconcile_date (datetime): Last time this subscription were reconciled about cluster usage. [optional]  # noqa: E501
            last_released_at (datetime): Last time status was set to Released for this cluster/subscription in Unix time. [optional]  # noqa: E501
            last_telemetry_date (datetime): Last telemetry authorization request for this cluster/subscription in Unix time. [optional]  # noqa: E501
            organization_id (str): [optional]  # noqa: E501
            plan_id (str): [optional]  # noqa: E501
            product_bundle (str): [optional]  # noqa: E501
            provenance (str): [optional]  # noqa: E501
            region_id (str): [optional]  # noqa: E501
            released (bool): [optional]  # noqa: E501
            service_level (str): [optional]  # noqa: E501
            socket_total (int): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            support_level (str): [optional]  # noqa: E501
            system_units (str): [optional]  # noqa: E501
            trial_end_date (datetime): If the subscription is a trial, date the trial ends. [optional]  # noqa: E501
            usage (str): [optional]  # noqa: E501
            capabilities ([Capability]): [optional]  # noqa: E501
            created_at (datetime): [optional]  # noqa: E501
            creator (AccountReference): [optional]  # noqa: E501
            eval_expiration_date (datetime): Calulated as the subscription created date + 60 days. [optional]  # noqa: E501
            labels ([Label]): [optional]  # noqa: E501
            metrics ([OneMetric]): [optional]  # noqa: E501
            notification_contacts ([Account]): [optional]  # noqa: E501
            plan (Plan): [optional]  # noqa: E501
            updated_at (datetime): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Subscription - a model defined in OpenAPI

        Keyword Args:
            managed (bool):
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            href (str): [optional]  # noqa: E501
            id (str): [optional]  # noqa: E501
            kind (str): [optional]  # noqa: E501
            billing_expiration_date (datetime): If set, the date the subscription expires based on the billing model. [optional]  # noqa: E501
            billing_marketplace_account (str): [optional]  # noqa: E501
            cloud_account_id (str): [optional]  # noqa: E501
            cloud_provider_id (str): [optional]  # noqa: E501
            cluster_billing_model (str): [optional]  # noqa: E501
            cluster_id (str): [optional]  # noqa: E501
            console_url (str): [optional]  # noqa: E501
            consumer_uuid (str): [optional]  # noqa: E501
            cpu_total (int): [optional]  # noqa: E501
            creator_id (str): [optional]  # noqa: E501
            display_name (str): [optional]  # noqa: E501
            external_cluster_id (str): [optional]  # noqa: E501
            last_reconcile_date (datetime): Last time this subscription were reconciled about cluster usage. [optional]  # noqa: E501
            last_released_at (datetime): Last time status was set to Released for this cluster/subscription in Unix time. [optional]  # noqa: E501
            last_telemetry_date (datetime): Last telemetry authorization request for this cluster/subscription in Unix time. [optional]  # noqa: E501
            organization_id (str): [optional]  # noqa: E501
            plan_id (str): [optional]  # noqa: E501
            product_bundle (str): [optional]  # noqa: E501
            provenance (str): [optional]  # noqa: E501
            region_id (str): [optional]  # noqa: E501
            released (bool): [optional]  # noqa: E501
            service_level (str): [optional]  # noqa: E501
            socket_total (int): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            support_level (str): [optional]  # noqa: E501
            system_units (str): [optional]  # noqa: E501
            trial_end_date (datetime): If the subscription is a trial, date the trial ends. [optional]  # noqa: E501
            usage (str): [optional]  # noqa: E501
            capabilities ([Capability]): [optional]  # noqa: E501
            created_at (datetime): [optional]  # noqa: E501
            creator (AccountReference): [optional]  # noqa: E501
            eval_expiration_date (datetime): Calulated as the subscription created date + 60 days. [optional]  # noqa: E501
            labels ([Label]): [optional]  # noqa: E501
            metrics ([OneMetric]): [optional]  # noqa: E501
            notification_contacts ([Account]): [optional]  # noqa: E501
            plan (Plan): [optional]  # noqa: E501
            updated_at (datetime): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              SubscriptionAllOf,
              SubscriptionCommonFields,
          ],
          'oneOf': [
          ],
        }
